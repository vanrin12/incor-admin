{"version":3,"sources":["utils/Apis.js","constants/router.js","modules/media/redux/index.js","modules/authen/redux/index.js","routers/PrivateRoute.js","routers/index.js","stores/rootReducer.js","modules/home/sagas/getDataMainSaga.js","modules/accounts/sagas/getListUserSaga.js","modules/accounts/sagas/getListRolesSaga.js","modules/accounts/sagas/createUserSaga.js","modules/partner/sagas/getListPartnerSaga.js","modules/partner/sagas/getListAreasSaga.js","modules/partner/sagas/getListConstantSaga.js","modules/partner/sagas/getListScalesSaga.js","modules/post/sagas/getListCategoriesSaga.js","modules/post/sagas/deleteCategoriesSaga.js","modules/post/sagas/registerCategoriesSaga.js","modules/post/sagas/getListParentSaga.js","modules/post/sagas/getCategoriesDetailSaga.js","modules/post/sagas/updateCategorySaga.js","modules/post/sagas/getListPostSaga.js","modules/post/sagas/getListAllCategorySaga.js","modules/post/sagas/registerPostSaga.js","modules/post/sagas/getListSeoTitleSaga.js","modules/post/sagas/deletePostSaga.js","modules/post/sagas/getDetailPostSaga.js","modules/authen/sagas/loginSaga.js","modules/post/sagas/updatePostSaga.js","modules/authen/sagas/logoutSaga.js","modules/partner/sagas/getListPartnerManagementSaga.js","modules/partner/sagas/deletePartnerSaga.js","modules/partner/sagas/registerPartnerCompanySaga.js","modules/partner/sagas/getListPartnerProductSaga.js","modules/partner/sagas/getListConstructionsSaga.js","modules/partner/sagas/registerPartnerProductSaga.js","modules/partner/sagas/registerPartnerConstructionSaga.js","modules/partner/sagas/getListPartnerQuoteSaga.js","modules/partner/sagas/getDetailPartnerProductSaga.js","modules/partner/sagas/updatePartnerProductSaga.js","modules/partner/sagas/getDetailConstructionsSaga.js","modules/partner/sagas/updateConstructionsSaga.js","modules/media/sagas/getListMediaSaga.js","modules/media/sagas/uploadMediaSaga.js","modules/media/sagas/deleteMediaSaga.js","modules/customer/sagas/getListCustomerSaga.js","modules/customer/sagas/getListNameIncorSaga.js","modules/customer/sagas/getDetailCustomerSaga.js","modules/customer/sagas/updateCustomerSaga.js","modules/customer/sagas/getListSpaceTypeSaga.js","modules/customer/sagas/getListDivisonSaga.js","modules/customer/sagas/registerProjectSaga.js","modules/customer/sagas/deleteProjectSaga.js","modules/customer/sagas/getDetailProjectSaga.js","modules/customer/sagas/getListProjectSaga.js","modules/customer/sagas/getListConstructionSaga.js","modules/customer/sagas/registerConstructionCustomerSaga.js","modules/customer/sagas/registerProjectItemSaga.js","modules/customer/sagas/updateProjectItemSaga.js","modules/display/sagas/createDisplayIntroduceSaga.js","modules/display/sagas/getValueHeaderSaga.js","modules/display/sagas/createDisplayFooterSaga.js","modules/display/sagas/updateAboutUsSaga.js","modules/display/sagas/getDataAboutUsSaga.js","modules/display/sagas/getCustomerSaga.js","modules/display/sagas/updateCustomerSaga.js","modules/display/sagas/getDataMapSaga.js","modules/display/sagas/getDataFooterSaga.js","modules/display/sagas/updateSaleMapSaga.js","stores/rootSagas.js","App.js","stores/createStore.js","serviceWorker.js","index.js","modules/partner/redux/index.js","modules/customer/redux/index.js","modules/post/redux/index.js","modules/display/redux/index.js","modules/accounts/redux/index.js","modules/home/redux/index.js"],"names":["ROUTES","LOGIN","GET_PARTNER","GET_AREAS","GET_SCALES","GET_CATEGORIES","DELETE_CATEGORIES","REGISTER_CATEGORIES","GET_PARENT","GET_CATEGORIES_DETAIL","id","concat","UPDATE_CATEGORIES","GET_LIST_POST","GET_ALL_CATEGORIES","REGISTER_POST","GET_ALL_SEO_TITLE","DELETE_POST","GET_POST_DETAIL","UPDATE_POST","GET_LIST_CONSTANT","LOG_OUT","GET_PARTNER_MANAGEMENT","API_GET_LIST_MEDIA","params","API_DELETE_PARTNER","API_REGISTER_PARTNER_COMPANY","API_GET_LIST_CONSTRUCTION","API_GET_LIST_PARTNER_PRODUCT","API_REGISTER_PARTNER_PRODUCT","GET_DATA_HOME","USER_LIST","GET_ROLES","API_UPLOAD_MEDIA","API_REGISTER_PARTNER_CONSTRUCTION","API_GET_LIST_PARTNER_QUOTE","API_GET_DETAIL_PARTNER_PRODUCT","API_UPDATE_PARTNER_PRODUCT","API_GET_DETAIL_PARTNER_CONSTRUCTION","API_UPDATE_PARTNER_CONSTRUCTION","API_DELETE_MEDIA","API_GET_LIST_CUSTOMER","API_GET_LIST_NAME","API_GET_DETAIL_CUSTOMER","API_UPDATE_CUSTOMER","API_GET_LIST_SPACE_TYPE","API_GET_LIST_DIVISION","API_REGISTER_PROJECT","API_DELETE_PROJECT","API_GET_DETAIL_PROJECT","API_GET_LIST_PROJECT","API_GET_LIST_CONSTRUCTION_CUSTOMER","API_REGISTER_CONSTRUCTION_CUSTOMER","API_REGISTER_PROJECT_ITEM","API_GET_DETAIL_CONSTRUCTION_CUSTOMER","API_UPDATE_PROJECT_ITEM","API_CREATE_INTRODUCE","API_GET_VALUE_HEADER","API_CREATE_FOOTER","API_GET_DATA_FOOTER","API_ABOUT_US","API_CUSTOMER_EXP","API_DATA_MAP","API","create","baseURL","process","ROUTERS","MAIN_PAGE","SIGN_UP","PARTNER","CUSTOMER","CUSTOMER_INFORMATION_PROJECT","CUSTOMER_INFORMATION","POST","DETAIL_POST","POST_REGISTER","REGISTER_CATEGORY_POST","UPDATE_CATEGORY","UPDATE_CATEGORY_POST","ACCOUNTS","ROUTERS_PARTNER_MANAGEMENT","PARTNER_MANAGEMENT","INFORMATION","INFORMATION_NEEDS","INFORMATION_PROJECT","INFORMATION_PROJECT_REGISTER","PROGRESS_PROJECT","PROGRESS_PROJECT_DETAIL","DISPLAY","DISPLAY_IDENTIFIED","DISPLAY_MAIN","MAIN_MEDIA","DISPLAY_HEADER","DISPLAY_HEADER_INTRODUCE","DISPLAY_FOOTER","ABOUT_US","CUSTOMER_EXP","DISPLAY_SALE","Types","Creators","createActions","getListMedia","getListMediaSuccess","getListMediaFailed","uploadMedia","uploadMediaSuccess","uploadMediaFailed","deleteMedia","deleteMediaSuccess","deleteMediaFailed","INITIAL_STATE","Immutable","isProcessing","dataListMedia","statusCode","isProcessingUpload","totalRows","isProcessingDelete","HANDLERS","GET_LIST_MEDIA","state","action","merge","type","GET_LIST_MEDIA_SUCCESS","medias","data","map","item","name","url","total","GET_LIST_MEDIA_FAILED","UPLOAD_MEDIA","UPLOAD_MEDIA_SUCCESS","status","dataListMediaNew","code","media","UPLOAD_MEDIA_FAILED","error","DELETE_MEDIA","DELETE_MEDIA_SUCCESS","DELETE_MEDIA_FAILED","mediaReducer","createReducer","signIn","signInSuccess","signInFailed","logOut","logOutSuccess","logOutFailed","getListUser","userInfo","errors","token","accountInfo","getInfoUser","SIGN_IN","SIGN_IN_SUCCESS","user","SIGN_IN_FAILED","LOG_OUT_SUCCESS","LOG_OUT_FAILED","GET_LIST_USER","list","rememberMe","authReducer","React","_ref","component","Component","isAuthenticated","path","rest","Route","Object","assign","render","props","Redirect","to","pathname","loginContainer","lazy","HomeMain","Partner","Customer","CustomerInfo","Post","RegisterPost","DetailPost","RegisterCategoryPost","UpdateCategoryPost","accountComponents","partnerManagement","informationNeeds","informationProjectRegister","progressProject","displayContainer","displayIdentifiedContainer","displayMainContainer","displaySaleContainer","AboutUsContainer","displayMediaContainer","CustomerContainer","displayHeaderContainer","displayHeaderIntroduceContainer","displayFooterContainer","connect","dispatch","bindActionCreators","memo","setHeader","createElement","BrowserRouter","Suspense","Switch","exact","PrivateRoute","appReducer","combineReducers","account","accountReducer","main","homeReducer","partnerReducer","postReducer","customerReducer","displayReducer","getDataMain","response","call","get","ok","put","msg","errorMsg","message","getDataMainSaga","takeLatest","getUserList","payload","getListUserSaga","getRoles","getListRolesSaga","createUser","_action$payload","_action$payload2","post","JSON","stringify","password","role_name","roleName","headers","_action$payload3","userList","createUserSaga","getListPartner","GET_LIST_PARTNER_SUCCESS","GET_LIST_PARTNER_FAILED","getListPartnerSaga","GET_LIST_PARTNER","getListAreas","GET_LIST_AREAS_SUCCESS","GET_LIST_AREAS_FAILED","getListAreasSaga","GET_LIST_AREAS","getListConstant","GET_LIST_CONSTANT_SUCCESS","GET_LIST_CONSTANT_FAILED","getListConstantMySaga","getListScales","GET_LIST_SCALES_SUCCESS","GET_LIST_SCALES_FAILED","getListScalesSaga","GET_LIST_SCALES","getListCategories","GET_LIST_CATEGORIES_SUCCESS","GET_LIST_CATEGORIES_FAILED","getListCategoriesSaga","GET_LIST_CATEGORIES","deleteCategories","delete","DELETE_CATEGORIES_SUCCESS","DELETE_CATEGORIES_FAILED","deleteCategoriesSaga","registerCategories","REGISTER_CATEGORIES_SUCCESS","REGISTER_CATEGORIES_FAILED","registerCategoriesSaga","getListParent","GET_LIST_PARENT_SUCCESS","GET_LIST_PARENT_FAILED","getListParentSaga","GET_LIST_PARENT","getCategoriesDetail","GET_CATEGORIES_DETAIL_SUCCESS","GET_CATEGORIES_DETAIL_FAILED","getCategoriesDetailSaga","updateCategories","UPDATE_CATEGORIES_SUCCESS","UPDATE_CATEGORIES_FAILED","updateCategoriesSaga","getListPost","GET_LIST_POST_SUCCESS","GET_LIST_POST_FAILED","getListPostSaga","getListAllCategories","GET_LIST_ALL_CATEGORIES_SUCCESS","GET_LIST_ALL_CATEGORIES_FAILED","getListAllCategoriesSaga","GET_LIST_ALL_CATEGORIES","registerPost","REGISTER_POST_SUCCESS","REGISTER_POST_FAILED","registerPostSaga","getListAllSeoTitle","GET_LIST_ALL_SEO_TITLE_SUCCESS","GET_LIST_ALL_SEO_TITLE_FAILED","getListAllSeoTitleSaga","GET_LIST_ALL_SEO_TITLE","deletePost","DELETE_POST_SUCCESS","DELETE_POST_FAILED","deletePostSaga","getPostDetail","GET_POST_DETAIL_SUCCESS","GET_POST_DETAIL_FAILED","getPostDetailSaga","login","loginInfo","loginSaga","updatePost","UPDATE_POST_SUCCESS","UPDATE_POST_FAILED","updatePostSaga","logOutSaga","getListPartnerManagement","GET_LIST_PARTNER_MANAGEMENT_SUCCESS","GET_LIST_PARTNER_MANAGEMENT_FAILED","getListPartnerManagementSaga","GET_LIST_PARTNER_MANAGEMENT","deletePartner","DELETE_PARTNER_SUCCESS","DELETE_PARTNER_FAILED","deletePartnerSaga","DELETE_PARTNER","registerPartnerCompany","REGISTER_PARTNER_COMPANY_SUCCESS","REGISTER_PARTNER_COMPANY_FAILED","registerPartnerCompanySaga","REGISTER_PARTNER_COMPANY","getListPartnerProduct","GET_LIST_PARTNER_PRODUCT_SUCCESS","GET_LIST_PARTNER_PRODUCT_FAILED","getListPartnerProductSaga","GET_LIST_PARTNER_PRODUCT","getListConstruction","GET_LIST_CONSTRUCTION_SUCCESS","GET_LIST_CONSTRUCTION_FAILED","getListConstructionSaga","GET_LIST_CONSTRUCTION","registerPartnerProduct","REGISTER_PARTNER_PRODUCT_SUCCESS","REGISTER_PARTNER_PRODUCT_FAILED","registerPartnerProductSaga","REGISTER_PARTNER_PRODUCT","registerPartnerConstruction","REGISTER_PARTNER_CONSTRUCTION_SUCCESS","REGISTER_PARTNER_CONSTRUCTION_FAILED","registerPartnerConstructionSaga","REGISTER_PARTNER_CONSTRUCTION","getListPartnerQuote","GET_LIST_PARTNER_QUOTE_SUCCESS","GET_LIST_PARTNER_QUOTE_FAILED","getListPartnerQuoteSaga","GET_LIST_PARTNER_QUOTE","getDetailPartnerProduct","GET_DETAIL_PARTNER_PRODUCT_SUCCESS","GET_DETAIL_PARTNER_PRODUCT_FAILED","getDetailPartnerProductSaga","GET_DETAIL_PARTNER_PRODUCT","updatePartnerProduct","UPDATE_PARTNER_PRODUCT_SUCCESS","UPDATE_PARTNER_PRODUCT_FAILED","updatePartnerProductSaga","UPDATE_PARTNER_PRODUCT","getDetailPartnerConstruction","GET_DETAIL_PARTNER_CONSTRUCTION_SUCCESS","GET_DETAIL_PARTNER_CONSTRUCTION_FAILED","getDetailPartnerConstructionSaga","GET_DETAIL_PARTNER_CONSTRUCTION","updatePartnerConstruction","UPDATE_PARTNER_CONSTRUCTION_SUCCESS","UPDATE_PARTNER_CONSTRUCTION_FAILED","updatePartnerConstructionSaga","UPDATE_PARTNER_CONSTRUCTION","page","mediaType","getListMediaSaga","uploadMediaSaga","deleteMediaSaga","getListCustomer","GET_LIST_CUSTOMER_SUCCESS","GET_LIST_CUSTOMER_FAILED","getListCustomerSaga","GET_LIST_CUSTOMER","getListName","GET_LIST_NAME_SUCCESS","GET_LIST_NAME_FAILED","getListNameSaga","GET_LIST_NAME","getDetailCustomer","GET_DETAIL_CUSTOMER_SUCCESS","GET_DETAIL_CUSTOMER_FAILED","getDetailCustomerSaga","GET_DETAIL_CUSTOMER","updateCustomer","UPDATE_CUSTOMER_SUCCESS","UPDATE_CUSTOMER_FAILED","updateCustomerSaga","UPDATE_CUSTOMER","getListSpaceType","GET_LIST_SPACE_TYPE_SUCCESS","GET_LIST_SPACE_TYPE_FAILED","getListSpaceTypeSaga","GET_LIST_SPACE_TYPE","getListDivision","GET_LIST_DIVISION_SUCCESS","GET_LIST_DIVISION_FAILED","getListDivisionSaga","GET_LIST_DIVISION","registerProject","REGISTER_PROJECT_SUCCESS","REGISTER_PROJECT_FAILED","registerProjectSaga","REGISTER_PROJECT","deleteProject","DELETE_PROJECT_SUCCESS","DELETE_PROJECT_FAILED","deleteProjectSaga","DELETE_PROJECT","getDetailProject","GET_DETAIL_PROJECT_SUCCESS","GET_DETAIL_PROJECT_FAILED","getDetailProjectSaga","GET_DETAIL_PROJECT","getListProject","GET_LIST_PROJECT_SUCCESS","GET_LIST_PROJECT_FAILED","getListProjectSaga","GET_LIST_PROJECT","getListConstructionCustomer","GET_LIST_CONSTRUCTION_CUSTOMER_SUCCESS","GET_LIST_CONSTRUCTION_CUSTOMER_FAILED","getListConstructionCustomerSaga","GET_LIST_CONSTRUCTION_CUSTOMER","registerConstructionCustomer","REGISTER_CONSTRUCTION_CUSTOMER_SUCCESS","REGISTER_CONSTRUCTION_CUSTOMER_FAILED","registerConstructionCustomerSaga","REGISTER_CONSTRUCTION_CUSTOMER","registerProjectItem","REGISTER_PROJECT_ITEM_SUCCESS","REGISTER_PROJECT_ITEM_FAILED","registerProjectItemSaga","REGISTER_PROJECT_ITEM","updateProjectItem","UPDATE_PROJECT_ITEM_SUCCESS","UPDATE_PROJECT_ITEM_FAILED","updateProjectItemSaga","UPDATE_PROJECT_ITEM","createIntroduce","CREATE_INTRODUCE_SUCCESS","CREATE_INTRODUCE_FAILED","createIntroduceSaga","CREATE_INTRODUCE","getValueHeader","GET_VALUE_HEADER_SUCCESS","GET_VALUE_HEADER_FAILED","getValueHeaderSaga","GET_VALUE_HEADER","createFooter","CREATE_FOOTER_SUCCESS","CREATE_FOOTER_FAILED","createFooterSaga","CREATE_FOOTER","updateAboutUs","UPDATE_ABOUT_US_SUCCESS","UPDATE_ABOUT_US_FAILED","updateAboutUsSaga","UPDATE_ABOUT_US","getAboutUs","GET_ABOUT_US_SUCCESS","about","GET_ABOUT_US_FAILED","getAboutUsSaga","GET_ABOUT_US","getCustomerExperiences","GET_CUSTOMER_EXP_SUCCESS","GET_CUSTOMER_EXP_FAILED","getCustomerExperiencesSaga","GET_CUSTOMER_EXP","updateCustomerExp","UPDATE_CUSTOMER_EXP_SUCCESS","UPDATE_CUSTOMER_EXP_FAILED","updateCustomerExpSaga","UPDATE_CUSTOMER_EXP","getDataMap","GET_DATA_MAP_SUCCESS","GET_DATA_MAP_FAILED","getDataMapSaga","GET_DATA_MAP","getDataFooter","GET_DATA_FOOTER_SUCCESS","GET_DATA_FOOTER_FAILED","getDataFooterSaga","GET_DATA_FOOTER","updateSaleMap","UPDATE_SALE_MAP_SUCCESS","UPDATE_SALE_MAP_FAILED","updateSaleMapSaga","UPDATE_SALE_MAP","RootSagas","all","getListConstantSaga","logoutSaga","App","store","persistor","persistConfig","key","storage","stateReconciler","seamlessImmutableReconciler","whitelist","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","thunk","serializableCheck","persistedReducer","persistReducer","appReducers","configureStore","reducer","devTools","persistStore","run","rootSagas","createStore","className","PersistGate","loading","Provider","Router","Boolean","window","location","hostname","match","ReactDOM","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","getListPartnerSuccess","getListPartnerFailed","getListAreasSuccess","getListAreasFailed","getListScalesSuccess","getListScalesFailed","getListConstantSuccess","getListConstantFailed","getListPartnerManagementSuccess","getListPartnerManagementFailed","deletePartnerSuccess","deletePartnerFailed","registerPartnerCompanySuccess","registerPartnerCompanyFailed","getListConstructionSuccess","getListConstructionFailed","getListPartnerProductSuccess","getListPartnerProductFailed","getListPartnerQuoteSuccess","getListPartnerQuoteFailed","registerPartnerProductSuccess","registerPartnerProductFailed","registerPartnerConstructionSuccess","registerPartnerConstructionFailed","getDetailPartnerProductSuccess","getDetailPartnerProductFailed","updatePartnerProductSuccess","updatePartnerProductFailed","getDetailPartnerConstructionSuccess","getDetailPartnerConstructionFailed","updatePartnerConstructionSuccess","updatePartnerConstructionFailed","resetType","dataPartner","dataAreas","dataConstant","dataScales","totalPartner","dataQuotes","dataConstructions","dataProducts","dataPartnerManagement","dataDetailPartnerProduct","dataDetailPartnerConstruction","totalPartnerManagement","totalQuotes","partner","partner_name","job","company_career","headquarters","company_address","vote","avg","areas","value","label","constant","split","index","product","quotes","_item$customer","_item$project","_item$project$space_d","_item$project2","date","created_at","moment","format","nameCustomer","customer","tag","project","space_division","dvt","address","construction","RESET_TYPE","getListCustomerSuccess","getListCustomerFailed","getListNameSuccess","getListNameFailed","getDetailCustomerSuccess","getDetailCustomerFailed","updateCustomerSuccess","updateCustomerFailed","getListSpaceTypeSuccess","getListSpaceTypeFailed","getListDivisionSuccess","getListDivisionFailed","registerProjectSuccess","registerProjectFailed","deleteProjectSuccess","deleteProjectFailed","getDetailProjectSuccess","getDetailProjectFailed","getListProjectSuccess","getListProjectFailed","getListConstructionCustomerSuccess","getListConstructionCustomerFailed","registerConstructionCustomerSuccess","registerConstructionCustomerFailed","registerProjectItemSuccess","registerProjectItemFailed","resetData","updateProjectItemSuccess","updateProjectItemFailed","dataCustomer","listName","totalCustomer","dataDetailCustomer","listSpaceType","listDivision","dataDetailProject","listProject","listConstructionCustomer","listTableConstruction","totalConstruction","projectId","_item$area","nameIncor","name_incor","area","division","_action$data$","_action$data$$item","categories","category","description","amount","time","estimate","unit","progress","progress_begin","progress_end","price","paid","prices","note","RESET_DATA","getListCategoriesSuccess","getListCategoriesFailed","deleteCategoriesSuccess","deleteCategoriesFailed","registerCategoriesSuccess","registerCategoriesFailed","getListParentSuccess","getListParentFailed","getCategoriesDetailSuccess","getCategoriesDetailFailed","updateCategoriesSuccess","updateCategoriesFailed","getListPostSuccess","getListPostFailed","getListAllCategoriesSuccess","getListAllCategoriesFailed","registerPostSuccess","registerPostFailed","getListAllSeoTitleSuccess","getListAllSeoTitleFailed","deletePostSuccess","deletePostFailed","getPostDetailSuccess","getPostDetailFailed","updatePostSuccess","updatePostFailed","dataCategories","dataParent","categoriesDetail","listPost","totalPost","listAllCategories","listAllSeoTitle","dataPostDetail","listCategoryPost","dataListCategory","title","slug","score","posts_count","listParent","dataListPost","seo_title","writer","Thumbnail","image","seo_score","dataAllCategories","dataAllSeoTitle","getAboutUsSuccess","getAboutUsFailed","updateAboutUsSuccess","updateAboutUsFailed","getCustomerEXP","getCustomerEXPSuccess","getCustomerEXPFailed","updateCustomerEXP","updateCustomerEXPSuccess","updateCustomerEXPFailed","getDataMapSuccess","getDataMapFailed","createIntroduceSuccess","createIntroduceFailed","getValueHeaderSuccess","getValueHeaderFailed","createFooterSuccess","createFooterFailed","getDataFooterSuccess","getDataFooterFailed","updateSaleMapSuccess","updateSaleMapFailed","dataAboutUs","dataSaleMap","valueHeader","accountSlice","createSlice","initialState","listRoles","reducers","getListUserSuccess","users","getListUserFailed","getUserRoles","getUserRolesSuccess","_action$data","roles","getUserRolesFailed","createUserSuccess","_data$user","_data$user2","_data$user3","_data$user3$roles","_data$user3$roles$","_data$user4","log","create_at","createUserFailed","actions","mainSlice","dataMain","getDataMainSuccess","getDataMainFailed"],"mappings":"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","file":"static/js/main.8c24c898.chunk.js","sourcesContent":["/* eslint-disable camelcase */\r\n// import libs\r\nimport { create } from 'apisauce';\r\n\r\nconst API_URI = process.env.REACT_APP_API_URL;\r\n\r\nexport const ROUTES = {\r\n  LOGIN: `/api/v1/auth/login`,\r\n  GET_PARTNER: 'api/v1/admin/partners',\r\n  GET_AREAS: 'api/v1/site/areas',\r\n  GET_SCALES: 'api/v1/site/scales',\r\n  GET_CATEGORIES: 'api/v1/admin/categories',\r\n  DELETE_CATEGORIES: 'api/v1/admin/categories',\r\n  REGISTER_CATEGORIES: 'api/v1/admin/categories',\r\n  GET_PARENT: 'api/v1/admin/categories/parent',\r\n  GET_CATEGORIES_DETAIL: (id) => `api/v1/admin/categories/${id}`,\r\n  UPDATE_CATEGORIES: (id) => `api/v1/admin/categories/${id}`,\r\n  GET_LIST_POST: 'api/v1/admin/posts',\r\n  GET_ALL_CATEGORIES: 'api/v1/site/categories',\r\n  REGISTER_POST: 'api/v1/admin/posts',\r\n  GET_ALL_SEO_TITLE: 'api/v1/admin/posts/seo-title',\r\n  DELETE_POST: 'api/v1/admin/posts',\r\n  GET_POST_DETAIL: (id) => `api/v1/admin/posts/${id}`,\r\n  UPDATE_POST: (id) => `api/v1/admin/posts/${id}`,\r\n  GET_LIST_CONSTANT: `api/v1/site/constants`,\r\n  LOG_OUT: `api/v1/auth/logout`,\r\n  GET_PARTNER_MANAGEMENT: (id) => `api/v1/admin/partners/${id}`,\r\n  API_GET_LIST_MEDIA: (params) => `/api/v1/admin/media/${params}`,\r\n  API_DELETE_PARTNER: `api/v1/admin/partners`,\r\n  API_REGISTER_PARTNER_COMPANY: `api/v1/admin/partners/company`,\r\n  API_GET_LIST_CONSTRUCTION: `api/v1/admin/partners/constructions`,\r\n  API_GET_LIST_PARTNER_PRODUCT: `api/v1/admin/partners/products`,\r\n  API_REGISTER_PARTNER_PRODUCT: `api/v1/admin/partners/products`,\r\n  GET_DATA_HOME: 'api/v1/admin/main',\r\n  USER_LIST: 'api/v1/admin/users',\r\n  GET_ROLES: 'api/v1/admin/roles',\r\n  API_UPLOAD_MEDIA: `/api/v1/admin/media`,\r\n  API_REGISTER_PARTNER_CONSTRUCTION: `api/v1/admin/partners/constructions`,\r\n  API_GET_LIST_PARTNER_QUOTE: (id) => `api/v1/admin/partners/${id}/quotes`,\r\n  API_GET_DETAIL_PARTNER_PRODUCT: (id) =>\r\n    `api/v1/admin/partners/products/${id}`,\r\n  API_UPDATE_PARTNER_PRODUCT: (id) => `api/v1/admin/partners/products/${id}`,\r\n  API_GET_DETAIL_PARTNER_CONSTRUCTION: (id) =>\r\n    `api/v1/admin/partners/constructions/${id}`,\r\n  API_UPDATE_PARTNER_CONSTRUCTION: (id) =>\r\n    `api/v1/admin/partners/constructions/${id}`,\r\n  API_DELETE_MEDIA: (id) => `/api/v1/admin/media/${id}`,\r\n  API_GET_LIST_CUSTOMER: `/api/v1/admin/customers`,\r\n  API_GET_LIST_NAME: `/api/v1/admin/customers/name-incor`,\r\n  API_GET_DETAIL_CUSTOMER: (id) => `/api/v1/admin/customers/${id}`,\r\n  API_UPDATE_CUSTOMER: (id) => `/api/v1/admin/customers/${id}`,\r\n  API_GET_LIST_SPACE_TYPE: `/api/v1/site/space-type`,\r\n  API_GET_LIST_DIVISION: `/api/v1/site/space-division`,\r\n  API_REGISTER_PROJECT: `/api/v1/admin/customers/project`,\r\n  API_DELETE_PROJECT: (id) => `/api/v1/admin/customers/project/${id}`,\r\n  API_GET_DETAIL_PROJECT: (id) => `/api/v1/admin/customers/${id}/project`,\r\n  API_GET_LIST_PROJECT: `/api/v1/site/projects`,\r\n  API_GET_LIST_CONSTRUCTION_CUSTOMER: (id) =>\r\n    `/api/v1/admin/customers/construction-items/${id}`,\r\n  API_REGISTER_CONSTRUCTION_CUSTOMER: `/api/v1/admin/customers/construction-items`,\r\n  API_REGISTER_PROJECT_ITEM: `/api/v1/admin/customers/project-items`,\r\n  API_GET_DETAIL_CONSTRUCTION_CUSTOMER: (id) =>\r\n    `/api/v1/admin/customers/construction-items/${id}`,\r\n  API_UPDATE_PROJECT_ITEM: (id) =>\r\n    `/api/v1/admin/customers/project-items/${id}`,\r\n  API_CREATE_INTRODUCE: `/api/v1/admin/constants/data-maps`,\r\n  API_GET_VALUE_HEADER: `/api/v1/admin/constants/data-maps`,\r\n  API_CREATE_FOOTER: `/api/v1/admin/constants`,\r\n  API_GET_DATA_FOOTER: `/api/v1/admin/constants`,\r\n\r\n  //  Giao diện\r\n  API_ABOUT_US: `/api/v1/admin/constants/about-us`,\r\n  API_CUSTOMER_EXP: `/api/v1/admin/constants/customer-experiences`,\r\n  API_DATA_MAP: `/api/v1/admin/constants/data-maps`,\r\n};\r\n\r\nexport const API = create({\r\n  baseURL: API_URI,\r\n});\r\n","const ROUTERS = {\r\n  MAIN_PAGE: `/`,\r\n  LOGIN: `/login`,\r\n  SIGN_UP: '/sign-up',\r\n  PARTNER: '/partner',\r\n  CUSTOMER: '/customer',\r\n  CUSTOMER_INFORMATION_PROJECT: '/customer/information/project',\r\n  CUSTOMER_INFORMATION: '/customer/information/project/:id',\r\n  POST: '/post',\r\n  DETAIL_POST: '/post/:id',\r\n  POST_REGISTER: '/post/add',\r\n  REGISTER_CATEGORY_POST: '/post/category/add',\r\n  UPDATE_CATEGORY: '/post/category/update',\r\n  UPDATE_CATEGORY_POST: '/post/category/update/:id',\r\n  ACCOUNTS: '/accounts',\r\n  ROUTERS_PARTNER_MANAGEMENT: '/partner/management',\r\n  PARTNER_MANAGEMENT: '/partner/management/:id',\r\n  INFORMATION: '/customer/information',\r\n  INFORMATION_NEEDS: '/customer/information/:id',\r\n  INFORMATION_PROJECT: '/customer/information/project/register',\r\n  INFORMATION_PROJECT_REGISTER: '/customer/information/project/register/:id',\r\n  PROGRESS_PROJECT: '/customer/progress/project',\r\n  PROGRESS_PROJECT_DETAIL: '/customer/progress/project/:id',\r\n  DISPLAY: '/display',\r\n  DISPLAY_IDENTIFIED: '/display/identified',\r\n  DISPLAY_MAIN: '/display/main',\r\n  MAIN_MEDIA: '/medias',\r\n  DISPLAY_HEADER: '/header',\r\n  DISPLAY_HEADER_INTRODUCE: '/header/introduce',\r\n  DISPLAY_FOOTER: '/header/footer',\r\n  ABOUT_US: '/display/about_us',\r\n  CUSTOMER_EXP: '/display/customer_exp',\r\n  DISPLAY_SALE: `/display/sale-map`,\r\n};\r\n\r\nexport default ROUTERS;\r\n","// import libs\r\nimport { createActions, createReducer } from 'reduxsauce';\r\nimport Immutable from 'seamless-immutable';\r\n\r\n// Define action creators\r\nexport const { Types, Creators } = createActions({\r\n  getListMedia: ['data'],\r\n  getListMediaSuccess: null,\r\n  getListMediaFailed: null,\r\n\r\n  uploadMedia: ['data'],\r\n  uploadMediaSuccess: null,\r\n  uploadMediaFailed: null,\r\n\r\n  deleteMedia: ['id'],\r\n  deleteMediaSuccess: null,\r\n  deleteMediaFailed: null,\r\n});\r\n\r\n// Initial state\r\nexport const INITIAL_STATE = Immutable({\r\n  isProcessing: false,\r\n  dataListMedia: [],\r\n  statusCode: 0,\r\n  isProcessingUpload: false,\r\n  totalRows: 0,\r\n  isProcessingDelete: false,\r\n});\r\n\r\nconst getListMedia = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n    totalRows: 0,\r\n  });\r\n};\r\n\r\nconst getListMediaSuccess = (state, action) => {\r\n  const { medias } = action.data;\r\n\r\n  const dataListMedia =\r\n    medias &&\r\n    medias.data &&\r\n    medias.data.map((item) => {\r\n      return {\r\n        id: item.id,\r\n        name: item.name,\r\n        url: item.url,\r\n        type: item.type,\r\n      };\r\n    });\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    totalRows: (medias && medias.total) || 0,\r\n    dataListMedia,\r\n  });\r\n};\r\n\r\nconst getListMediaFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    totalRows: 0,\r\n  });\r\n};\r\n\r\nconst uploadMedia = (state, action) => {\r\n  return state.merge({\r\n    type: action.type,\r\n    isProcessingUpload: true,\r\n  });\r\n};\r\n\r\nconst uploadMediaSuccess = (state, action) => {\r\n  const { status, data } = action.data;\r\n  const dataListMediaNew = state && state.dataListMedia;\r\n  const totalRows = state && state.totalRows;\r\n  return state.merge({\r\n    type: action.type,\r\n    statusCode: status && status.code,\r\n    isProcessingUpload: false,\r\n    totalRows: totalRows + 1,\r\n    dataListMedia: [\r\n      {\r\n        id: data && data.media && data.media.id,\r\n        name: data && data.media && data.media.name,\r\n        url: data && data.media && data.media.url,\r\n        type: data && data.media && data.media.type,\r\n      },\r\n      ...dataListMediaNew,\r\n    ],\r\n  });\r\n};\r\n\r\nconst uploadMediaFailed = (state, action) => {\r\n  return state.merge({\r\n    type: action.type,\r\n    error: action.error,\r\n    isProcessingUpload: false,\r\n  });\r\n};\r\n\r\nconst deleteMedia = (state, action) => {\r\n  return state.merge({\r\n    isProcessingDelete: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deleteMediaSuccess = (state, action) => {\r\n  const { status } = action;\r\n  return state.merge({\r\n    isProcessingDelete: false,\r\n    type: action.type,\r\n    statusCode: status && status.code,\r\n  });\r\n};\r\n\r\nconst deleteMediaFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessingDelete: false,\r\n    type: action.type,\r\n    statusCode: '',\r\n  });\r\n};\r\n\r\n// Assign handler to types.\r\nconst HANDLERS = {\r\n  [Types.GET_LIST_MEDIA]: getListMedia,\r\n  [Types.GET_LIST_MEDIA_SUCCESS]: getListMediaSuccess,\r\n  [Types.GET_LIST_MEDIA_FAILED]: getListMediaFailed,\r\n\r\n  [Types.UPLOAD_MEDIA]: uploadMedia,\r\n  [Types.UPLOAD_MEDIA_SUCCESS]: uploadMediaSuccess,\r\n  [Types.UPLOAD_MEDIA_FAILED]: uploadMediaFailed,\r\n\r\n  [Types.DELETE_MEDIA]: deleteMedia,\r\n  [Types.DELETE_MEDIA_SUCCESS]: deleteMediaSuccess,\r\n  [Types.DELETE_MEDIA_FAILED]: deleteMediaFailed,\r\n};\r\n\r\n// Create reducers by pass state and handlers\r\nexport const mediaReducer = createReducer(INITIAL_STATE, HANDLERS);\r\n","// import libs\r\nimport { createActions, createReducer } from 'reduxsauce';\r\nimport Immutable from 'seamless-immutable';\r\n\r\n// Define action creators\r\nexport const { Types, Creators } = createActions({\r\n  signIn: ['loginInfo'],\r\n  signInSuccess: null,\r\n  signInFailed: null,\r\n  logOut: null,\r\n  logOutSuccess: null,\r\n  logOutFailed: null,\r\n  getListUser: ['list'],\r\n});\r\n\r\n// Initial state\r\nexport const INITIAL_STATE = Immutable({\r\n  userInfo: {},\r\n  isProcessing: false,\r\n  errors: '',\r\n  type: '',\r\n  token: '',\r\n  accountInfo: {},\r\n  getInfoUser: {},\r\n});\r\n\r\nconst signIn = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n    errors: '',\r\n  });\r\n};\r\n\r\nconst getListUser = (state, action) => {\r\n  return state.merge({\r\n    getInfoUser:\r\n      action && action.list && action.list.rememberMe ? action.list : {},\r\n  });\r\n};\r\n\r\nconst signInSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    token: action.data.token,\r\n    accountInfo: action.data.user,\r\n    errors: '',\r\n  });\r\n};\r\n\r\nconst signInFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errors: action.errors,\r\n  });\r\n};\r\n\r\nconst logOut = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst logOutSuccess = (state) => {\r\n  return state.merge({\r\n    ...INITIAL_STATE,\r\n    getInfoUser: state.getInfoUser,\r\n  });\r\n};\r\nconst logOutFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\n// Assign handler to types.\r\nconst HANDLERS = {\r\n  [Types.SIGN_IN]: signIn,\r\n  [Types.SIGN_IN_SUCCESS]: signInSuccess,\r\n  [Types.SIGN_IN_FAILED]: signInFailed,\r\n  [Types.LOG_OUT]: logOut,\r\n  [Types.LOG_OUT_SUCCESS]: logOutSuccess,\r\n  [Types.LOG_OUT_FAILED]: logOutFailed,\r\n  [Types.GET_LIST_USER]: getListUser,\r\n};\r\n\r\n// Create reducers by pass state and handlers\r\nexport const authReducer = createReducer(INITIAL_STATE, HANDLERS);\r\n","// @flow\r\nimport * as React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\ntype Props = {\r\n  component: any,\r\n  isAuthenticated: boolean,\r\n  path: string,\r\n};\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  path,\r\n  ...rest\r\n}: Props) => {\r\n  const loginPath = '/login';\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isAuthenticated || (!isAuthenticated && loginPath === path) ? (\r\n          <Component path={path} {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: loginPath,\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo<Props>(PrivateRoute);\r\n","// @flow\r\n\r\nimport React, { lazy, Suspense, memo } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n\r\n// import { createBrowserHistory } from 'history';\r\n\r\nimport ROUTERS from 'constants/router';\r\n\r\nimport { API } from '../utils/Apis';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nconst loginContainer = lazy(() =>\r\n  import('modules/authen/containers/loginContainer')\r\n);\r\n\r\nconst HomeMain = lazy(() => import('modules/home/components'));\r\n\r\nconst Partner = lazy(() =>\r\n  import('modules/partner/containers/partnerContainer')\r\n);\r\nconst Customer = lazy(() =>\r\n  import('modules/customer/containers/customerContainer')\r\n);\r\nconst CustomerInfo = lazy(() =>\r\n  import('modules/customer/containers/infomationNeedsProjectContainer')\r\n);\r\nconst Post = lazy(() => import('modules/post/containers/postContainer'));\r\nconst RegisterPost = lazy(() =>\r\n  import('modules/post/containers/registerPostContainer')\r\n);\r\nconst DetailPost = lazy(() =>\r\n  import('modules/post/containers/detailPostContainer')\r\n);\r\nconst RegisterCategoryPost = lazy(() =>\r\n  import('modules/post/containers/registerCategoryContainer')\r\n);\r\nconst UpdateCategoryPost = lazy(() =>\r\n  import('modules/post/containers/editCategoryContainer')\r\n);\r\nconst accountComponents = lazy(() => import('modules/accounts/components'));\r\nconst partnerManagement = lazy(() =>\r\n  import('modules/partner/containers/partnerManagementContainer')\r\n);\r\nconst informationNeeds = lazy(() =>\r\n  import('modules/customer/containers/customerDetailContainer')\r\n);\r\nconst informationProjectRegister = lazy(() =>\r\n  import('modules/customer/containers/registerProjectContainer')\r\n);\r\nconst progressProject = lazy(() =>\r\n  import('modules/customer/containers/progressProjectContainer')\r\n);\r\nconst displayContainer = lazy(() => import('modules/display/components'));\r\nconst displayIdentifiedContainer = lazy(() =>\r\n  import('modules/display/components/identified')\r\n);\r\nconst displayMainContainer = lazy(() =>\r\n  import('modules/display/components/main')\r\n);\r\nconst displaySaleContainer = lazy(() =>\r\n  import('modules/display/containers/sale')\r\n);\r\nconst AboutUsContainer = lazy(() => import('modules/display/containers'));\r\n\r\nconst displayMediaContainer = lazy(() =>\r\n  import('modules/media/containers/index')\r\n);\r\nconst CustomerContainer = lazy(() =>\r\n  import('modules/display/containers/customer')\r\n);\r\n\r\nconst displayHeaderContainer = lazy(() =>\r\n  import('modules/display/containers/displayHeaderContainer')\r\n);\r\n\r\nconst displayHeaderIntroduceContainer = lazy(() =>\r\n  import('modules/display/containers/displayHeaderIntroduceContainer')\r\n);\r\n\r\nconst displayFooterContainer = lazy(() =>\r\n  import('modules/display/containers/displayFooterContainer')\r\n);\r\n\r\ntype Props = {\r\n  token: string,\r\n};\r\n\r\nconst Router = ({ token }: Props) => {\r\n  const isAuthenticated = token !== '';\r\n\r\n  if (token) {\r\n    API.setHeader('Authorization', `Bearer ${token}`);\r\n  }\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Suspense>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path={ROUTERS.MAIN_MEDIA}\r\n            component={displayMediaContainer}\r\n          />\r\n          <Route exact path={ROUTERS.LOGIN} component={loginContainer} />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.MAIN_PAGE}\r\n            component={HomeMain}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.PARTNER}\r\n            component={Partner}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.CUSTOMER}\r\n            component={Customer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.CUSTOMER_INFORMATION}\r\n            component={CustomerInfo}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.INFORMATION_NEEDS}\r\n            component={informationNeeds}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.INFORMATION_PROJECT_REGISTER}\r\n            component={informationProjectRegister}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.PROGRESS_PROJECT_DETAIL}\r\n            component={progressProject}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.POST}\r\n            component={Post}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.POST_REGISTER}\r\n            component={RegisterPost}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.DETAIL_POST}\r\n            component={DetailPost}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.REGISTER_CATEGORY_POST}\r\n            component={RegisterCategoryPost}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.UPDATE_CATEGORY_POST}\r\n            component={UpdateCategoryPost}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.ACCOUNTS}\r\n            component={accountComponents}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.PARTNER_MANAGEMENT}\r\n            component={partnerManagement}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.DISPLAY}\r\n            component={displayContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.DISPLAY_HEADER_INTRODUCE}\r\n            component={displayHeaderIntroduceContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.DISPLAY_HEADER}\r\n            component={displayHeaderContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.DISPLAY_FOOTER}\r\n            component={displayFooterContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.DISPLAY_IDENTIFIED}\r\n            component={displayIdentifiedContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.DISPLAY_MAIN}\r\n            component={displayMainContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.ABOUT_US}\r\n            component={AboutUsContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.CUSTOMER_EXP}\r\n            component={CustomerContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n\r\n          <PrivateRoute\r\n            exact\r\n            path={ROUTERS.DISPLAY_SALE}\r\n            component={displaySaleContainer}\r\n            isAuthenticated={isAuthenticated}\r\n          />\r\n        </Switch>\r\n      </Suspense>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.authReducer.token,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({}, dispatch);\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  null\r\n)(memo<Props>(Router));\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport accountReducer from 'modules/accounts/redux';\r\nimport homeReducer from 'modules/home/redux';\r\nimport { partnerReducer } from 'modules/partner/redux';\r\nimport { postReducer } from 'modules/post/redux';\r\nimport { authReducer } from 'modules/authen/redux';\r\nimport { customerReducer } from 'modules/customer/redux';\r\nimport { mediaReducer } from 'modules/media/redux';\r\nimport { displayReducer } from 'modules/display/redux';\r\n\r\nconst appReducer = combineReducers({\r\n  account: accountReducer,\r\n  main: homeReducer,\r\n  partnerReducer,\r\n  postReducer,\r\n  authReducer,\r\n  customerReducer,\r\n  mediaReducer,\r\n  displayReducer,\r\n});\r\n\r\nexport default appReducer;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\n// worker Saga: will be fired on GET_LIST_EVENT actions\r\nfunction* getDataMain() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.GET_DATA_HOME));\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n\r\n      // In case: getMainIndex request success\r\n      yield put({ type: 'main/getDataMainSuccess', data });\r\n    } else {\r\n      const { msg } = response?.data;\r\n      // In case: getMainIndex request failed\r\n      yield put({\r\n        type: 'main/getDataMainFailed',\r\n        errorMsg: msg.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n\r\n    yield put({ type: 'main/getDataMainFailed' });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signup Account on each dispatched `getMainIndex` action.\r\n*/\r\nfunction* getDataMainSaga() {\r\n  yield takeLatest('main/getDataMain', getDataMain);\r\n}\r\n\r\nexport default getDataMainSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\nfunction* getUserList(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.USER_LIST, action.payload)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n\r\n      yield put({ type: 'accounts/getListUserSuccess', data });\r\n    } else {\r\n      const { msg } = response?.data;\r\n      yield put({\r\n        type: 'accounts/getListUserFailed',\r\n        errorMsg: msg.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n\r\n    yield put({ type: 'accounts/getListUserFailed' });\r\n  }\r\n}\r\n\r\nfunction* getListUserSaga() {\r\n  yield takeLatest('accounts/getListUser', getUserList);\r\n}\r\n\r\nexport default getListUserSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\nfunction* getRoles() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.GET_ROLES));\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n\r\n      yield put({ type: 'accounts/getUserRolesSuccess', data });\r\n    } else {\r\n      const { msg } = response?.data;\r\n      yield put({\r\n        type: 'accounts/getUserRolesFailed',\r\n        errorMsg: msg.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n\r\n    yield put({ type: 'accounts/getUserRolesFailed' });\r\n  }\r\n}\r\n\r\nfunction* getListRolesSaga() {\r\n  yield takeLatest('accounts/getUserRoles', getRoles);\r\n}\r\n\r\nexport default getListRolesSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\nfunction* createUser(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.post(\r\n        ROUTES.USER_LIST,\r\n        JSON.stringify({\r\n          name: action?.payload?.name,\r\n          password: 'abcd1234',\r\n          role_name: action?.payload?.roleName,\r\n        }),\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      )\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n\r\n      yield put({\r\n        type: 'accounts/createUserSuccess',\r\n        data,\r\n        userList: action?.payload?.userList,\r\n      });\r\n    } else {\r\n      const { msg } = response?.data;\r\n      yield put({\r\n        type: 'accounts/createUserFailed',\r\n        errorMsg: msg.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n\r\n    yield put({ type: 'accounts/createUserFailed' });\r\n  }\r\n}\r\n\r\nfunction* createUserSaga() {\r\n  yield takeLatest('accounts/createUser', createUser);\r\n}\r\n\r\nexport default createUserSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListPartner(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() => API.get(ROUTES.GET_PARTNER, action.data));\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_PARTNER_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_PARTNER_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_PARTNER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_PARTNER` action.\r\n*/\r\nfunction* getListPartnerSaga() {\r\n  yield takeLatest(Types.GET_LIST_PARTNER, getListPartner);\r\n}\r\n\r\nexport default getListPartnerSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListAreas() {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() => API.get(ROUTES.GET_AREAS));\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_AREAS_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_AREAS_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_AREAS_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_AREAS` action.\r\n*/\r\nfunction* getListAreasSaga() {\r\n  yield takeLatest(Types.GET_LIST_AREAS, getListAreas);\r\n}\r\n\r\nexport default getListAreasSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListConstant(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.GET_LIST_CONSTANT, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_CONSTANT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_CONSTANT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_CONSTANT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_CONSTANT` action.\r\n*/\r\nfunction* getListConstantMySaga() {\r\n  yield takeLatest(Types.GET_LIST_CONSTANT, getListConstant);\r\n}\r\n\r\nexport default getListConstantMySaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListScales() {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() => API.get(ROUTES.GET_SCALES));\r\n    if (response.ok) {\r\n      const { data } = response;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_SCALES_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_SCALES_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_SCALES_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_SCALES` action.\r\n*/\r\nfunction* getListScalesSaga() {\r\n  yield takeLatest(Types.GET_LIST_SCALES, getListScales);\r\n}\r\n\r\nexport default getListScalesSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListCategories(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.GET_CATEGORIES, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_CATEGORIES_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_CATEGORIES_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_CATEGORIES_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_CATEGORIES` action.\r\n*/\r\nfunction* getListCategoriesSaga() {\r\n  yield takeLatest(Types.GET_LIST_CATEGORIES, getListCategories);\r\n}\r\n\r\nexport default getListCategoriesSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* deleteCategories(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.delete(ROUTES.DELETE_CATEGORIES, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.DELETE_CATEGORIES_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.DELETE_CATEGORIES_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.DELETE_CATEGORIES_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `DELETE_CATEGORIES` action.\r\n*/\r\nfunction* deleteCategoriesSaga() {\r\n  yield takeLatest(Types.DELETE_CATEGORIES, deleteCategories);\r\n}\r\n\r\nexport default deleteCategoriesSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* registerCategories(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.REGISTER_CATEGORIES, JSON.stringify(action.data))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.REGISTER_CATEGORIES_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.REGISTER_CATEGORIES_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.REGISTER_CATEGORIES_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `REGISTER_CATEGORIES` action.\r\n*/\r\nfunction* registerCategoriesSaga() {\r\n  yield takeLatest(Types.REGISTER_CATEGORIES, registerCategories);\r\n}\r\n\r\nexport default registerCategoriesSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListParent() {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() => API.get(ROUTES.GET_PARENT));\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_PARENT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_PARENT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_PARENT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_PARENT` action.\r\n*/\r\nfunction* getListParentSaga() {\r\n  yield takeLatest(Types.GET_LIST_PARENT, getListParent);\r\n}\r\n\r\nexport default getListParentSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getCategoriesDetail(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.GET_CATEGORIES_DETAIL(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_CATEGORIES_DETAIL_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_CATEGORIES_DETAIL_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_CATEGORIES_DETAIL_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_CATEGORIES_DETAIL` action.\r\n*/\r\nfunction* getCategoriesDetailSaga() {\r\n  yield takeLatest(Types.GET_CATEGORIES_DETAIL, getCategoriesDetail);\r\n}\r\n\r\nexport default getCategoriesDetailSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* updateCategories(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.put(ROUTES.UPDATE_CATEGORIES(action.id), JSON.stringify(action.data))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.UPDATE_CATEGORIES_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.UPDATE_CATEGORIES_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_CATEGORIES_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `UPDATE_CATEGORIES` action.\r\n*/\r\nfunction* updateCategoriesSaga() {\r\n  yield takeLatest(Types.UPDATE_CATEGORIES, updateCategories);\r\n}\r\n\r\nexport default updateCategoriesSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListPost(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.GET_LIST_POST, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_POST_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_POST_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_POST_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_POST` action.\r\n*/\r\nfunction* getListPostSaga() {\r\n  yield takeLatest(Types.GET_LIST_POST, getListPost);\r\n}\r\n\r\nexport default getListPostSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListAllCategories(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.GET_ALL_CATEGORIES, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_ALL_CATEGORIES_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_ALL_CATEGORIES_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_ALL_CATEGORIES_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_ALL_CATEGORIES` action.\r\n*/\r\nfunction* getListAllCategoriesSaga() {\r\n  yield takeLatest(Types.GET_LIST_ALL_CATEGORIES, getListAllCategories);\r\n}\r\n\r\nexport default getListAllCategoriesSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* registerPost(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.REGISTER_POST, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.REGISTER_POST_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.REGISTER_POST_FAILED,\r\n        errorMsg: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.REGISTER_POST_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `REGISTER_POST` action.\r\n*/\r\nfunction* registerPostSaga() {\r\n  yield takeLatest(Types.REGISTER_POST, registerPost);\r\n}\r\n\r\nexport default registerPostSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListAllSeoTitle() {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() => API.get(ROUTES.GET_ALL_SEO_TITLE));\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_ALL_SEO_TITLE_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_ALL_SEO_TITLE_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_ALL_SEO_TITLE_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_ALL_SEO_TITLE` action.\r\n*/\r\nfunction* getListAllSeoTitleSaga() {\r\n  yield takeLatest(Types.GET_LIST_ALL_SEO_TITLE, getListAllSeoTitle);\r\n}\r\n\r\nexport default getListAllSeoTitleSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.delete(ROUTES.DELETE_POST, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.DELETE_POST_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.DELETE_POST_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.DELETE_POST_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `DELETE_POST` action.\r\n*/\r\nfunction* deletePostSaga() {\r\n  yield takeLatest(Types.DELETE_POST, deletePost);\r\n}\r\n\r\nexport default deletePostSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getPostDetail(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.GET_POST_DETAIL(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_POST_DETAIL_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_POST_DETAIL_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_POST_DETAIL_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_POST_DETAIL` action.\r\n*/\r\nfunction* getPostDetailSaga() {\r\n  yield takeLatest(Types.GET_POST_DETAIL, getPostDetail);\r\n}\r\n\r\nexport default getPostDetailSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* login(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     * url: enpoint/login\r\n     * params:\r\n     *  {\r\n     *    username: 'Lorem'\r\n     *    password: 'Lorem',\r\n     *    isRemeberMe: true | false,\r\n     *  }\r\n     *\r\n     */\r\n    const response = yield call(() => API.post(ROUTES.LOGIN, action.loginInfo));\r\n\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: Login request success\r\n      yield put({ type: Types.SIGN_IN_SUCCESS, data });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.SIGN_IN_FAILED,\r\n        errors: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.SIGN_IN_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* loginSaga() {\r\n  yield takeLatest(Types.SIGN_IN, login);\r\n}\r\n\r\nexport default loginSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* updatePost(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.UPDATE_POST(action.id), action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.UPDATE_POST_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.UPDATE_POST_FAILED,\r\n        errorMsg: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_POST_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `UPDATE_POST` action.\r\n*/\r\nfunction* updatePostSaga() {\r\n  yield takeLatest(Types.UPDATE_POST, updatePost);\r\n}\r\n\r\nexport default updatePostSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\nimport { Types } from '../redux';\r\n\r\nfunction* logOut() {\r\n  try {\r\n    /**\r\n     * Example data\r\n     * url: enpoint/logOut\r\n     * params:\r\n     *  {\r\n     *    username: 'Lorem'\r\n     *    password: 'Lorem',\r\n     *    isRemeberMe: true | false,\r\n     *  }\r\n     *\r\n     */\r\n    const response = yield call(() => API.post(ROUTES.LOG_OUT));\r\n\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: Login request success\r\n      yield put({ type: Types.LOG_OUT_SUCCESS, data });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({ type: Types.LOG_OUT_FAILED, error: response.error });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.LOG_OUT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* logOutSaga() {\r\n  yield takeLatest(Types.LOG_OUT, logOut);\r\n}\r\n\r\nexport default logOutSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListPartnerManagement(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.GET_PARTNER_MANAGEMENT(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_PARTNER_MANAGEMENT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_PARTNER_MANAGEMENT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_PARTNER_MANAGEMENT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_PARTNER_MANAGEMENT` action.\r\n*/\r\nfunction* getListPartnerManagementSaga() {\r\n  yield takeLatest(Types.GET_LIST_PARTNER_MANAGEMENT, getListPartnerManagement);\r\n}\r\n\r\nexport default getListPartnerManagementSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* deletePartner(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.delete(ROUTES.API_DELETE_PARTNER, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.DELETE_PARTNER_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.DELETE_PARTNER_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.DELETE_PARTNER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `DELETE_PARTNER` action.\r\n*/\r\nfunction* deletePartnerSaga() {\r\n  yield takeLatest(Types.DELETE_PARTNER, deletePartner);\r\n}\r\n\r\nexport default deletePartnerSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* registerPartnerCompany(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_REGISTER_PARTNER_COMPANY, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.REGISTER_PARTNER_COMPANY_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.REGISTER_PARTNER_COMPANY_FAILED,\r\n        errorMsg: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.REGISTER_PARTNER_COMPANY_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `REGISTER_PARTNER_COMPANY` action.\r\n*/\r\nfunction* registerPartnerCompanySaga() {\r\n  yield takeLatest(Types.REGISTER_PARTNER_COMPANY, registerPartnerCompany);\r\n}\r\n\r\nexport default registerPartnerCompanySaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListPartnerProduct(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_PARTNER_PRODUCT, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_PARTNER_PRODUCT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_PARTNER_PRODUCT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_PARTNER_PRODUCT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_PARTNER_PRODUCT` action.\r\n*/\r\nfunction* getListPartnerProductSaga() {\r\n  yield takeLatest(Types.GET_LIST_PARTNER_PRODUCT, getListPartnerProduct);\r\n}\r\n\r\nexport default getListPartnerProductSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListConstruction(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_CONSTRUCTION, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_CONSTRUCTION_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_CONSTRUCTION_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_CONSTRUCTION_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_CONSTRUCTION` action.\r\n*/\r\nfunction* getListConstructionSaga() {\r\n  yield takeLatest(Types.GET_LIST_CONSTRUCTION, getListConstruction);\r\n}\r\n\r\nexport default getListConstructionSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* registerPartnerProduct(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_REGISTER_PARTNER_PRODUCT, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.REGISTER_PARTNER_PRODUCT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.REGISTER_PARTNER_PRODUCT_FAILED,\r\n        errorMsg: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.REGISTER_PARTNER_PRODUCT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `REGISTER_PARTNER_PRODUCT` action.\r\n*/\r\nfunction* registerPartnerProductSaga() {\r\n  yield takeLatest(Types.REGISTER_PARTNER_PRODUCT, registerPartnerProduct);\r\n}\r\n\r\nexport default registerPartnerProductSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* registerPartnerConstruction(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_REGISTER_PARTNER_CONSTRUCTION, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.REGISTER_PARTNER_CONSTRUCTION_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.REGISTER_PARTNER_CONSTRUCTION_FAILED,\r\n        errorMsg: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.REGISTER_PARTNER_CONSTRUCTION_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `REGISTER_PARTNER_CONSTRUCTION` action.\r\n*/\r\nfunction* registerPartnerConstructionSaga() {\r\n  yield takeLatest(\r\n    Types.REGISTER_PARTNER_CONSTRUCTION,\r\n    registerPartnerConstruction\r\n  );\r\n}\r\n\r\nexport default registerPartnerConstructionSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListPartnerQuote(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_PARTNER_QUOTE(action.id), action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_PARTNER_QUOTE_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_PARTNER_QUOTE_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_PARTNER_QUOTE_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_PARTNER_QUOTE` action.\r\n*/\r\nfunction* getListPartnerQuoteSaga() {\r\n  yield takeLatest(Types.GET_LIST_PARTNER_QUOTE, getListPartnerQuote);\r\n}\r\n\r\nexport default getListPartnerQuoteSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getDetailPartnerProduct(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_DETAIL_PARTNER_PRODUCT(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_DETAIL_PARTNER_PRODUCT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_DETAIL_PARTNER_PRODUCT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_DETAIL_PARTNER_PRODUCT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_DETAIL_PARTNER_PRODUCT` action.\r\n*/\r\nfunction* getDetailPartnerProductSaga() {\r\n  yield takeLatest(Types.GET_DETAIL_PARTNER_PRODUCT, getDetailPartnerProduct);\r\n}\r\n\r\nexport default getDetailPartnerProductSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* updatePartnerProduct(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_UPDATE_PARTNER_PRODUCT(action.id), action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.UPDATE_PARTNER_PRODUCT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.UPDATE_PARTNER_PRODUCT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_PARTNER_PRODUCT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `UPDATE_PARTNER_PRODUCT` action.\r\n*/\r\nfunction* updatePartnerProductSaga() {\r\n  yield takeLatest(Types.UPDATE_PARTNER_PRODUCT, updatePartnerProduct);\r\n}\r\n\r\nexport default updatePartnerProductSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getDetailPartnerConstruction(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_DETAIL_PARTNER_CONSTRUCTION(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_DETAIL_PARTNER_CONSTRUCTION_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_DETAIL_PARTNER_CONSTRUCTION_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_DETAIL_PARTNER_CONSTRUCTION_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_DETAIL_PARTNER_CONSTRUCTION` action.\r\n*/\r\nfunction* getDetailPartnerConstructionSaga() {\r\n  yield takeLatest(\r\n    Types.GET_DETAIL_PARTNER_CONSTRUCTION,\r\n    getDetailPartnerConstruction\r\n  );\r\n}\r\n\r\nexport default getDetailPartnerConstructionSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* updatePartnerConstruction(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_UPDATE_PARTNER_CONSTRUCTION(action.id), action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.UPDATE_PARTNER_CONSTRUCTION_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.UPDATE_PARTNER_CONSTRUCTION_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_PARTNER_CONSTRUCTION_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `UPDATE_PARTNER_CONSTRUCTION` action.\r\n*/\r\nfunction* updatePartnerConstructionSaga() {\r\n  yield takeLatest(\r\n    Types.UPDATE_PARTNER_CONSTRUCTION,\r\n    updatePartnerConstruction\r\n  );\r\n}\r\n\r\nexport default updatePartnerConstructionSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getListMedia(action) {\r\n  const { page, mediaType } = action.data;\r\n  const params = `${mediaType}?page=${page}`;\r\n  try {\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_MEDIA(params))\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: Login request success\r\n      yield put({ type: Types.GET_LIST_MEDIA_SUCCESS, data });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.GET_LIST_MEDIA_FAILED,\r\n        errors: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_MEDIA_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* getListMediaSaga() {\r\n  yield takeLatest(Types.GET_LIST_MEDIA, getListMedia);\r\n}\r\n\r\nexport default getListMediaSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* uploadMedia(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     * url: /revenues/store\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_UPLOAD_MEDIA, action.data, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      })\r\n    );\r\n\r\n    if (response.ok) {\r\n      // In case: request success\r\n      yield put({\r\n        type: Types.UPLOAD_MEDIA_SUCCESS,\r\n        data: response.data,\r\n      });\r\n    } else {\r\n      // In case: request failed\r\n      yield put({\r\n        type: Types.UPLOAD_MEDIA_FAILED,\r\n        error: response.data && response.data.error,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPLOAD_MEDIA_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts get revenues list on each dispatched `GET_PAYMENT_HISTORY` action.\r\n*/\r\nfunction* uploadMediaSaga() {\r\n  yield takeLatest(Types.UPLOAD_MEDIA, uploadMedia);\r\n}\r\n\r\nexport default uploadMediaSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* deleteMedia(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.delete(ROUTES.API_DELETE_MEDIA(action.id))\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data, status } = response.data;\r\n      // In case: Login request success\r\n      yield put({ type: Types.DELETE_MEDIA_SUCCESS, data, status });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.DELETE_MEDIA_FAILED,\r\n        errors: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.DELETE_MEDIA_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* deleteMediaSaga() {\r\n  yield takeLatest(Types.DELETE_MEDIA, deleteMedia);\r\n}\r\n\r\nexport default deleteMediaSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListCustomer(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_CUSTOMER, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_CUSTOMER_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_CUSTOMER_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_CUSTOMER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_CUSTOMER` action.\r\n*/\r\nfunction* getListCustomerSaga() {\r\n  yield takeLatest(Types.GET_LIST_CUSTOMER, getListCustomer);\r\n}\r\n\r\nexport default getListCustomerSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListName() {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() => API.get(ROUTES.API_GET_LIST_NAME));\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_NAME_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_NAME_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_NAME_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_NAME` action.\r\n*/\r\nfunction* getListNameSaga() {\r\n  yield takeLatest(Types.GET_LIST_NAME, getListName);\r\n}\r\n\r\nexport default getListNameSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getDetailCustomer(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_DETAIL_CUSTOMER(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_DETAIL_CUSTOMER_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_DETAIL_CUSTOMER_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_DETAIL_CUSTOMER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_DETAIL_CUSTOMER` action.\r\n*/\r\nfunction* getDetailCustomerSaga() {\r\n  yield takeLatest(Types.GET_DETAIL_CUSTOMER, getDetailCustomer);\r\n}\r\n\r\nexport default getDetailCustomerSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* updateCustomer(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_UPDATE_CUSTOMER(action.id), action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.UPDATE_CUSTOMER_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.UPDATE_CUSTOMER_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_CUSTOMER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `UPDATE_CUSTOMER` action.\r\n*/\r\nfunction* updateCustomerSaga() {\r\n  yield takeLatest(Types.UPDATE_CUSTOMER, updateCustomer);\r\n}\r\n\r\nexport default updateCustomerSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListSpaceType() {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() => API.get(ROUTES.API_GET_LIST_SPACE_TYPE));\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_SPACE_TYPE_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_SPACE_TYPE_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_SPACE_TYPE_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_SPACE_TYPE` action.\r\n*/\r\nfunction* getListSpaceTypeSaga() {\r\n  yield takeLatest(Types.GET_LIST_SPACE_TYPE, getListSpaceType);\r\n}\r\n\r\nexport default getListSpaceTypeSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListDivision(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_DIVISION, action.id)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_DIVISION_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_DIVISION_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_DIVISION_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_DIVISION` action.\r\n*/\r\nfunction* getListDivisionSaga() {\r\n  yield takeLatest(Types.GET_LIST_DIVISION, getListDivision);\r\n}\r\n\r\nexport default getListDivisionSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* registerProject(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_REGISTER_PROJECT, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.REGISTER_PROJECT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.REGISTER_PROJECT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.REGISTER_PROJECT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_DIVISION` action.\r\n*/\r\nfunction* registerProjectSaga() {\r\n  yield takeLatest(Types.REGISTER_PROJECT, registerProject);\r\n}\r\n\r\nexport default registerProjectSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* deleteProject(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.delete(ROUTES.API_DELETE_PROJECT(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.DELETE_PROJECT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.DELETE_PROJECT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.DELETE_PROJECT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_DIVISION` action.\r\n*/\r\nfunction* deleteProjectSaga() {\r\n  yield takeLatest(Types.DELETE_PROJECT, deleteProject);\r\n}\r\n\r\nexport default deleteProjectSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getDetailProject(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_DETAIL_PROJECT(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_DETAIL_PROJECT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_DETAIL_PROJECT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_DETAIL_PROJECT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_DIVISION` action.\r\n*/\r\nfunction* getDetailProjectSaga() {\r\n  yield takeLatest(Types.GET_DETAIL_PROJECT, getDetailProject);\r\n}\r\n\r\nexport default getDetailProjectSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListProject() {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() => API.get(ROUTES.API_GET_LIST_PROJECT));\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_PROJECT_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_PROJECT_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_PROJECT_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_DIVISION` action.\r\n*/\r\nfunction* getListProjectSaga() {\r\n  yield takeLatest(Types.GET_LIST_PROJECT, getListProject);\r\n}\r\n\r\nexport default getListProjectSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* getListConstructionCustomer(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_LIST_CONSTRUCTION_CUSTOMER(action.id))\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.GET_LIST_CONSTRUCTION_CUSTOMER_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.GET_LIST_CONSTRUCTION_CUSTOMER_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_LIST_CONSTRUCTION_CUSTOMER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_CONSTRUCTION_CUSTOMER` action.\r\n*/\r\nfunction* getListConstructionCustomerSaga() {\r\n  yield takeLatest(\r\n    Types.GET_LIST_CONSTRUCTION_CUSTOMER,\r\n    getListConstructionCustomer\r\n  );\r\n}\r\n\r\nexport default getListConstructionCustomerSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* registerConstructionCustomer(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_REGISTER_CONSTRUCTION_CUSTOMER, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.REGISTER_CONSTRUCTION_CUSTOMER_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.REGISTER_CONSTRUCTION_CUSTOMER_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.REGISTER_CONSTRUCTION_CUSTOMER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `REGISTER_CONSTRUCTION_CUSTOMER` action.\r\n*/\r\nfunction* registerConstructionCustomerSaga() {\r\n  yield takeLatest(\r\n    Types.REGISTER_CONSTRUCTION_CUSTOMER,\r\n    registerConstructionCustomer\r\n  );\r\n}\r\n\r\nexport default registerConstructionCustomerSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* registerProjectItem(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_REGISTER_PROJECT_ITEM, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.REGISTER_PROJECT_ITEM_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.REGISTER_PROJECT_ITEM_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.REGISTER_PROJECT_ITEM_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_DIVISION` action.\r\n*/\r\nfunction* registerProjectItemSaga() {\r\n  yield takeLatest(Types.REGISTER_PROJECT_ITEM, registerProjectItem);\r\n}\r\n\r\nexport default registerProjectItemSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from '../../../utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\nfunction* updateProjectItem(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_UPDATE_PROJECT_ITEM(action.id), action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: setting/ageCategory request success\r\n      yield put({ type: Types.UPDATE_PROJECT_ITEM_SUCCESS, data });\r\n    } else {\r\n      // In case: setting/ageCategory request failed\r\n      yield put({\r\n        type: Types.UPDATE_PROJECT_ITEM_FAILED,\r\n        // errorMsg: response.data.message && response.data.message,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_PROJECT_ITEM_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts signupAccount on each dispatched `GET_LIST_DIVISION` action.\r\n*/\r\nfunction* updateProjectItemSaga() {\r\n  yield takeLatest(Types.UPDATE_PROJECT_ITEM, updateProjectItem);\r\n}\r\n\r\nexport default updateProjectItemSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on CREATE_INTRODUCE actions\r\nfunction* createIntroduce(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     * url: enpoint/createIntroduce\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_CREATE_INTRODUCE, action.data)\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: createIntroduce request success\r\n      yield put({ type: Types.CREATE_INTRODUCE_SUCCESS, data });\r\n    } else {\r\n      // In case: createIntroduce request failed\r\n      yield put({\r\n        type: Types.CREATE_INTRODUCE_FAILED,\r\n        errors: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.CREATE_INTRODUCE_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts createIntroduce on each dispatched `CREATE_INTRODUCE` action.\r\n*/\r\nfunction* createIntroduceSaga() {\r\n  yield takeLatest(Types.CREATE_INTRODUCE, createIntroduce);\r\n}\r\n\r\nexport default createIntroduceSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on GET_VALUE_HEADER actions\r\nfunction* getValueHeader(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     * url: enpoint/getValueHeader\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_GET_VALUE_HEADER, action.data)\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: getValueHeader request success\r\n      yield put({ type: Types.GET_VALUE_HEADER_SUCCESS, data });\r\n    } else {\r\n      // In case: getValueHeader request failed\r\n      yield put({\r\n        type: Types.GET_VALUE_HEADER_FAILED,\r\n        errors: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_VALUE_HEADER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts getValueHeader on each dispatched `GET_VALUE_HEADER` action.\r\n*/\r\nfunction* getValueHeaderSaga() {\r\n  yield takeLatest(Types.GET_VALUE_HEADER, getValueHeader);\r\n}\r\n\r\nexport default getValueHeaderSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { ROUTES, API } from 'utils/Apis';\r\n\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on CREATE_FOOTER actions\r\nfunction* createFooter(action) {\r\n  try {\r\n    /**\r\n     * Example data\r\n     * url: enpoint/createFooter\r\n     *\r\n     */\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_CREATE_FOOTER, action.data)\r\n    );\r\n\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: createFooter request success\r\n      yield put({ type: Types.CREATE_FOOTER_SUCCESS, data });\r\n    } else {\r\n      // In case: createFooter request failed\r\n      yield put({\r\n        type: Types.CREATE_FOOTER_FAILED,\r\n        errors: response.data.status && response.data.status.msg,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.CREATE_FOOTER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts createFooter on each dispatched `CREATE_FOOTER` action.\r\n*/\r\nfunction* createFooterSaga() {\r\n  yield takeLatest(Types.CREATE_FOOTER, createFooter);\r\n}\r\n\r\nexport default createFooterSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* updateAboutUs(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_ABOUT_US, action.data, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      })\r\n    );\r\n    if (response.ok) {\r\n      const { data, status } = response.data;\r\n      // In case: Login request success\r\n      yield put({ type: Types.UPDATE_ABOUT_US_SUCCESS, data, status });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.UPDATE_ABOUT_US_FAILED,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_ABOUT_US_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* updateAboutUsSaga() {\r\n  yield takeLatest(Types.UPDATE_ABOUT_US, updateAboutUs);\r\n}\r\n\r\nexport default updateAboutUsSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getAboutUs() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.API_ABOUT_US));\r\n    if (response.ok) {\r\n      const { data } = response?.data;\r\n      // In case: Login request success\r\n      yield put({\r\n        type: Types.GET_ABOUT_US_SUCCESS,\r\n        data: data && data.about,\r\n      });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.GET_ABOUT_US_FAILED,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_ABOUT_US_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* getAboutUsSaga() {\r\n  yield takeLatest(Types.GET_ABOUT_US, getAboutUs);\r\n}\r\n\r\nexport default getAboutUsSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getCustomerExperiences() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.API_CUSTOMER_EXP));\r\n    if (response.ok) {\r\n      const { data } = response?.data;\r\n      // In case: Login request success\r\n      yield put({\r\n        type: Types.GET_CUSTOMER_EXP_SUCCESS,\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.GET_CUSTOMER_EXP_FAILED,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_CUSTOMER_EXP_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* getCustomerExperiencesSaga() {\r\n  yield takeLatest(Types.GET_CUSTOMER_EXP, getCustomerExperiences);\r\n}\r\n\r\nexport default getCustomerExperiencesSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* updateCustomerExp(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_CUSTOMER_EXP, action.data, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      })\r\n    );\r\n    if (response.ok) {\r\n      const { data, status } = response.data;\r\n      // In case: Login request success\r\n      yield put({ type: Types.UPDATE_CUSTOMER_EXP_SUCCESS, data, status });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.UPDATE_CUSTOMER_EXP_FAILED,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_CUSTOMER_EXP_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* updateCustomerExpSaga() {\r\n  yield takeLatest(Types.UPDATE_CUSTOMER_EXP, updateCustomerExp);\r\n}\r\n\r\nexport default updateCustomerExpSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getDataMap(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.get(ROUTES.API_DATA_MAP, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response?.data;\r\n      // In case: Login request success\r\n      yield put({\r\n        type: Types.GET_DATA_MAP_SUCCESS,\r\n        data: data?.map && data?.map[0],\r\n      });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.GET_DATA_MAP_FAILED,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_DATA_MAP_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* getDataMapSaga() {\r\n  yield takeLatest(Types.GET_DATA_MAP, getDataMap);\r\n}\r\n\r\nexport default getDataMapSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* getDataFooter() {\r\n  try {\r\n    const response = yield call(() => API.get(ROUTES.API_GET_DATA_FOOTER));\r\n    if (response.ok) {\r\n      const { data } = response?.data;\r\n      // In case: Login request success\r\n      yield put({\r\n        type: Types.GET_DATA_FOOTER_SUCCESS,\r\n        data,\r\n      });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.GET_DATA_FOOTER_FAILED,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.GET_DATA_FOOTER_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `GET_DATA_FOOTER` action.\r\n*/\r\nfunction* getDataFooterSaga() {\r\n  yield takeLatest(Types.GET_DATA_FOOTER, getDataFooter);\r\n}\r\n\r\nexport default getDataFooterSaga;\r\n","import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { ROUTES, API } from 'utils/Apis';\r\nimport { Types } from '../redux';\r\n\r\n// worker Saga: will be fired on SEND_INVITE actions\r\nfunction* updateSaleMap(action) {\r\n  try {\r\n    const response = yield call(() =>\r\n      API.post(ROUTES.API_DATA_MAP, action.data)\r\n    );\r\n    if (response.ok) {\r\n      const { data } = response.data;\r\n      // In case: Login request success\r\n      yield put({ type: Types.UPDATE_SALE_MAP_SUCCESS, data });\r\n    } else {\r\n      // In case: Login request failed\r\n      yield put({\r\n        type: Types.UPDATE_SALE_MAP_FAILED,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    // in case: server error\r\n    yield put({ type: Types.UPDATE_SALE_MAP_FAILED, error });\r\n  }\r\n}\r\n\r\n/*\r\n  Starts login on each dispatched `SIGN_IN` action.\r\n*/\r\nfunction* updateSaleMapSaga() {\r\n  yield takeLatest(Types.UPDATE_SALE_MAP, updateSaleMap);\r\n}\r\n\r\nexport default updateSaleMapSaga;\r\n","// import libs\r\nimport { all } from 'redux-saga/effects';\r\nimport getDataMainSaga from 'modules/home/sagas/getDataMainSaga';\r\nimport getListUserSaga from 'modules/accounts/sagas/getListUserSaga';\r\nimport getListRolesSaga from 'modules/accounts/sagas/getListRolesSaga';\r\nimport createUserSaga from 'modules//accounts/sagas/createUserSaga';\r\nimport getListPartnerSaga from 'modules/partner/sagas/getListPartnerSaga';\r\nimport getListAreasSaga from 'modules/partner/sagas/getListAreasSaga';\r\nimport getListConstantSaga from 'modules/partner/sagas/getListConstantSaga';\r\nimport getListScalesSaga from 'modules/partner/sagas/getListScalesSaga';\r\nimport getListCategoriesSaga from 'modules/post/sagas/getListCategoriesSaga';\r\nimport deleteCategoriesSaga from 'modules/post/sagas/deleteCategoriesSaga';\r\nimport registerCategoriesSaga from 'modules/post/sagas/registerCategoriesSaga';\r\nimport getListParentSaga from 'modules/post/sagas/getListParentSaga';\r\nimport getCategoriesDetailSaga from 'modules/post/sagas/getCategoriesDetailSaga';\r\nimport updateCategoriesSaga from 'modules/post/sagas/updateCategorySaga';\r\nimport getListPostSaga from 'modules/post/sagas/getListPostSaga';\r\nimport getListAllCategoriesSaga from 'modules/post/sagas/getListAllCategorySaga';\r\nimport registerPostSaga from 'modules/post/sagas/registerPostSaga';\r\nimport getListAllSeoTitleSaga from 'modules/post/sagas/getListSeoTitleSaga';\r\nimport deletePostSaga from 'modules/post/sagas/deletePostSaga';\r\nimport getPostDetailSaga from 'modules/post/sagas/getDetailPostSaga';\r\nimport loginSaga from 'modules/authen/sagas/loginSaga';\r\nimport updatePostSaga from 'modules/post/sagas/updatePostSaga';\r\nimport logoutSaga from 'modules/authen/sagas/logoutSaga';\r\nimport getListPartnerManagementSaga from 'modules/partner/sagas/getListPartnerManagementSaga';\r\nimport deletePartnerSaga from 'modules/partner/sagas/deletePartnerSaga';\r\nimport registerPartnerCompanySaga from 'modules/partner/sagas/registerPartnerCompanySaga';\r\nimport getListPartnerProductSaga from 'modules/partner/sagas/getListPartnerProductSaga';\r\nimport getListConstructionSaga from 'modules/partner/sagas/getListConstructionsSaga';\r\nimport registerPartnerProductSaga from 'modules/partner/sagas/registerPartnerProductSaga';\r\nimport registerPartnerConstructionSaga from 'modules/partner/sagas/registerPartnerConstructionSaga';\r\nimport getListPartnerQuoteSaga from 'modules/partner/sagas/getListPartnerQuoteSaga';\r\nimport getDetailPartnerProductSaga from 'modules/partner/sagas/getDetailPartnerProductSaga';\r\nimport updatePartnerProductSaga from 'modules/partner/sagas/updatePartnerProductSaga';\r\nimport getDetailPartnerConstructionSaga from 'modules/partner/sagas/getDetailConstructionsSaga';\r\nimport updatePartnerConstructionSaga from 'modules/partner/sagas/updateConstructionsSaga';\r\n\r\nimport getListMediaSaga from 'modules/media/sagas/getListMediaSaga';\r\nimport uploadMediaSaga from 'modules/media/sagas/uploadMediaSaga';\r\nimport deleteMediaSaga from 'modules/media/sagas/deleteMediaSaga';\r\nimport getListCustomerSaga from 'modules/customer/sagas/getListCustomerSaga';\r\nimport getListNameSaga from 'modules/customer/sagas/getListNameIncorSaga';\r\nimport getDetailCustomerSaga from 'modules/customer/sagas/getDetailCustomerSaga';\r\nimport updateCustomerSaga from 'modules/customer/sagas/updateCustomerSaga';\r\nimport getListSpaceTypeSaga from 'modules/customer/sagas/getListSpaceTypeSaga';\r\nimport getListDivisionSaga from 'modules/customer/sagas/getListDivisonSaga';\r\nimport registerProjectSaga from 'modules/customer/sagas/registerProjectSaga';\r\nimport deleteProjectSaga from 'modules/customer/sagas/deleteProjectSaga';\r\nimport getDetailProjectSaga from 'modules/customer/sagas/getDetailProjectSaga';\r\nimport getListProjectSaga from 'modules/customer/sagas/getListProjectSaga';\r\nimport getListConstructionCustomerSaga from 'modules/customer/sagas/getListConstructionSaga';\r\nimport registerConstructionCustomerSaga from 'modules/customer/sagas/registerConstructionCustomerSaga';\r\nimport registerProjectItemSaga from 'modules/customer/sagas/registerProjectItemSaga';\r\nimport updateProjectItemSaga from 'modules/customer/sagas/updateProjectItemSaga';\r\nimport createIntroduceSaga from 'modules/display/sagas/createDisplayIntroduceSaga';\r\nimport getValueHeaderSaga from 'modules/display/sagas/getValueHeaderSaga';\r\nimport createFooterSaga from 'modules/display/sagas/createDisplayFooterSaga';\r\n\r\nimport updateAboutUsSaga from 'modules/display/sagas/updateAboutUsSaga';\r\n\r\nimport getAboutUsSaga from 'modules/display/sagas/getDataAboutUsSaga';\r\n\r\nimport getCustomerExperiencesSaga from 'modules/display/sagas/getCustomerSaga';\r\nimport updateCustomerExpSaga from 'modules/display/sagas/updateCustomerSaga';\r\nimport getDataMapSaga from 'modules/display/sagas/getDataMapSaga';\r\nimport getDataFooterSaga from 'modules/display/sagas/getDataFooterSaga';\r\nimport updateSaleMapSaga from 'modules/display/sagas/updateSaleMapSaga';\r\n\r\nexport default function* RootSagas() {\r\n  yield all([\r\n    getDataMainSaga(),\r\n    getListUserSaga(),\r\n    getListRolesSaga(),\r\n    createUserSaga(),\r\n    getListPartnerSaga(),\r\n    getListAreasSaga(),\r\n    getListConstantSaga(),\r\n    getListCategoriesSaga(),\r\n    deleteCategoriesSaga(),\r\n    registerCategoriesSaga(),\r\n    getListParentSaga(),\r\n    getCategoriesDetailSaga(),\r\n    updateCategoriesSaga(),\r\n    getListPostSaga(),\r\n    getListAllCategoriesSaga(),\r\n    registerPostSaga(),\r\n    getListAllSeoTitleSaga(),\r\n    deletePostSaga(),\r\n    getPostDetailSaga(),\r\n    loginSaga(),\r\n    updatePostSaga(),\r\n    logoutSaga(),\r\n    getListPartnerManagementSaga(),\r\n    getListMediaSaga(),\r\n    deletePartnerSaga(),\r\n    registerPartnerCompanySaga(),\r\n    getListScalesSaga(),\r\n    getListPartnerProductSaga(),\r\n    getListConstructionSaga(),\r\n    registerPartnerProductSaga(),\r\n    uploadMediaSaga(),\r\n    registerPartnerConstructionSaga(),\r\n    getListPartnerQuoteSaga(),\r\n    getDetailPartnerProductSaga(),\r\n    updatePartnerProductSaga(),\r\n    getDetailPartnerConstructionSaga(),\r\n    updatePartnerConstructionSaga(),\r\n    deleteMediaSaga(),\r\n    getListCustomerSaga(),\r\n    getListNameSaga(),\r\n    getDetailCustomerSaga(),\r\n    updateCustomerSaga(),\r\n    getListSpaceTypeSaga(),\r\n    getListDivisionSaga(),\r\n    registerProjectSaga(),\r\n    deleteProjectSaga(),\r\n    getDetailProjectSaga(),\r\n    getListProjectSaga(),\r\n    getListConstructionCustomerSaga(),\r\n    registerConstructionCustomerSaga(),\r\n    registerProjectItemSaga(),\r\n    updateProjectItemSaga(),\r\n    createIntroduceSaga(),\r\n    getValueHeaderSaga(),\r\n    createFooterSaga(),\r\n\r\n    updateAboutUsSaga(),\r\n    getAboutUsSaga(),\r\n    getCustomerExperiencesSaga(),\r\n    updateCustomerExpSaga(),\r\n    getDataMapSaga(),\r\n    getDataFooterSaga(),\r\n    updateSaleMapSaga(),\r\n  ]);\r\n}\r\n","import React from 'react';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import './assets/css/slick.min.css';\r\n// import './assets/css/slick-theme.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n// Import Swiper styles\r\nimport 'swiper/swiper.scss';\r\nimport 'swiper/components/navigation/navigation.scss';\r\n// import 'swiper/components/pagination/pagination.scss';\r\nimport './App.scss';\r\nimport { Provider } from 'react-redux';\r\nimport Router from 'routers';\r\n\r\nimport createStore from './stores/createStore';\r\n\r\nfunction App() {\r\n  const { store, persistor } = createStore();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <Provider store={store}>\r\n          <Router />\r\n        </Provider>\r\n      </PersistGate>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// libs\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport logger from 'redux-logger';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport { seamlessImmutableReconciler } from 'redux-persist-seamless-immutable';\r\nimport appReducers from './rootReducer';\r\nimport rootSagas from './rootSagas';\r\n\r\n// creates the store\r\nexport default () => {\r\n  const persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: seamlessImmutableReconciler,\r\n    whitelist: [\r\n      'partnerReducer',\r\n      'postReducer',\r\n      'authReducer',\r\n      'customerReducer',\r\n      'displayReducer',\r\n    ],\r\n  };\r\n\r\n  /* ------------- Saga Middleware ------------- */\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middleware = [\r\n    ...getDefaultMiddleware({\r\n      thunk: false,\r\n      serializableCheck: false,\r\n    }),\r\n    sagaMiddleware,\r\n  ];\r\n\r\n  const devMode = process.env.NODE_ENV === 'development';\r\n\r\n  if (devMode) {\r\n    middleware.push(logger);\r\n  }\r\n\r\n  /* ------------- AutoRehydrate Enhancer ------------- */\r\n  const persistedReducer = persistReducer(persistConfig, appReducers);\r\n\r\n  const store = configureStore({\r\n    reducer: persistedReducer,\r\n    devTools: devMode,\r\n    middleware,\r\n  });\r\n\r\n  const persistor = persistStore(store);\r\n\r\n  // kick off root saga\r\n  sagaMiddleware.run(rootSagas);\r\n\r\n  return { store, persistor };\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={<div className=\"d-none\">Loading</div>}>\r\n      <App />\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n","// import libs\r\nimport { createActions, createReducer } from 'reduxsauce';\r\nimport Immutable from 'seamless-immutable';\r\nimport moment from 'moment';\r\n\r\n// Define action creators\r\nexport const { Types, Creators } = createActions({\r\n  getListPartner: ['data'],\r\n  getListPartnerSuccess: null,\r\n  getListPartnerFailed: null,\r\n  getListAreas: null,\r\n  getListAreasSuccess: null,\r\n  getListAreasFailed: null,\r\n  getListScales: null,\r\n  getListScalesSuccess: null,\r\n  getListScalesFailed: null,\r\n  getListConstant: ['data'],\r\n  getListConstantSuccess: null,\r\n  getListConstantFailed: null,\r\n  getListPartnerManagement: ['id'],\r\n  getListPartnerManagementSuccess: null,\r\n  getListPartnerManagementFailed: null,\r\n  deletePartner: ['data'],\r\n  deletePartnerSuccess: null,\r\n  deletePartnerFailed: null,\r\n  registerPartnerCompany: ['data'],\r\n  registerPartnerCompanySuccess: null,\r\n  registerPartnerCompanyFailed: null,\r\n  getListConstruction: ['data'],\r\n  getListConstructionSuccess: null,\r\n  getListConstructionFailed: null,\r\n  getListPartnerProduct: ['data'],\r\n  getListPartnerProductSuccess: null,\r\n  getListPartnerProductFailed: null,\r\n  getListPartnerQuote: ['id', 'data'],\r\n  getListPartnerQuoteSuccess: null,\r\n  getListPartnerQuoteFailed: null,\r\n  registerPartnerProduct: ['data'],\r\n  registerPartnerProductSuccess: null,\r\n  registerPartnerProductFailed: null,\r\n  registerPartnerConstruction: ['data'],\r\n  registerPartnerConstructionSuccess: null,\r\n  registerPartnerConstructionFailed: null,\r\n  getDetailPartnerProduct: ['id'],\r\n  getDetailPartnerProductSuccess: null,\r\n  getDetailPartnerProductFailed: null,\r\n  updatePartnerProduct: ['id', 'data'],\r\n  updatePartnerProductSuccess: null,\r\n  updatePartnerProductFailed: null,\r\n  getDetailPartnerConstruction: ['id'],\r\n  getDetailPartnerConstructionSuccess: null,\r\n  getDetailPartnerConstructionFailed: null,\r\n  updatePartnerConstruction: ['id', 'data'],\r\n  updatePartnerConstructionSuccess: null,\r\n  updatePartnerConstructionFailed: null,\r\n  resetType: null,\r\n});\r\n\r\n// Initial state\r\nexport const INITIAL_STATE = Immutable({\r\n  isProcessing: false,\r\n  dataPartner: [],\r\n  dataAreas: [],\r\n  dataConstant: [],\r\n  dataScales: [],\r\n  totalPartner: '',\r\n  dataQuotes: [],\r\n  dataConstructions: [],\r\n  dataProducts: [],\r\n  dataPartnerManagement: {},\r\n  dataDetailPartnerProduct: {},\r\n  dataDetailPartnerConstruction: {},\r\n  totalPartnerManagement: '',\r\n  totalQuotes: '',\r\n});\r\n\r\nconst getListPartner = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPartnerSuccess = (state, action) => {\r\n  const dataPartner = action.data.partner.data.map((item) => ({\r\n    id: item.id,\r\n    name: item.partner_name,\r\n    job: item.company_career,\r\n    headquarters: item.company_address,\r\n    vote: item.avg,\r\n  }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataPartner,\r\n    totalPartner: action.data.partner.total,\r\n  });\r\n};\r\n\r\nconst getListPartnerFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListAreas = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListAreasSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataAreas:\r\n      action.data.data &&\r\n      action.data.data.areas &&\r\n      action.data.data.areas.map((item) => {\r\n        return { id: item.id, value: item.name, label: item.name };\r\n      }),\r\n  });\r\n};\r\n\r\nconst getListAreasFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListScales = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListScalesSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataScales:\r\n      action.data.data &&\r\n      action.data.data.areas &&\r\n      action.data.data.areas.map((item) => {\r\n        return { id: item.id, value: item.name, label: item.name };\r\n      }),\r\n  });\r\n};\r\n\r\nconst getListScalesFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListConstant = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListConstantSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataConstant:\r\n      action.data.data &&\r\n      action.data.data.constant &&\r\n      action.data.data.constant.split(',').map((item, index) => {\r\n        return { id: index, value: item, label: item };\r\n      }),\r\n  });\r\n};\r\n\r\nconst getListConstantFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPartnerManagement = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPartnerManagementSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataPartnerManagement: action.data.partner,\r\n    totalPartnerManagement: action.data.partner.total,\r\n  });\r\n};\r\n\r\nconst getListPartnerManagementFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deletePartner = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deletePartnerSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deletePartnerFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPartnerCompany = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPartnerCompanySuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPartnerCompanyFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\nconst getListConstruction = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListConstructionSuccess = (state, action) => {\r\n  const dataConstructions = action.data.product;\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataConstructions,\r\n  });\r\n};\r\n\r\nconst getListConstructionFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPartnerProduct = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPartnerProductSuccess = (state, action) => {\r\n  const dataProducts = action.data.product;\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataProducts,\r\n  });\r\n};\r\n\r\nconst getListPartnerProductFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPartnerQuote = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPartnerQuoteSuccess = (state, action) => {\r\n  const dataQuotes = action.data.quotes.data.map((item) => {\r\n    return {\r\n      id: item.id,\r\n      date:\r\n        item.created_at && moment(item.created_at).format('HH:SS MM/DD/YYYY'),\r\n      nameCustomer: item.customer?.name,\r\n      tag: `#${item?.project?.space_division?.name}`,\r\n      dvt: item.project?.address,\r\n    };\r\n  });\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataQuotes,\r\n    totalQuotes: action.data.quotes.total,\r\n  });\r\n};\r\n\r\nconst getListPartnerQuoteFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPartnerProduct = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPartnerProductSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPartnerProductFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\nconst registerPartnerConstruction = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPartnerConstructionSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPartnerConstructionFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\nconst getDetailPartnerProduct = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getDetailPartnerProductSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataDetailPartnerProduct: action.data.product,\r\n  });\r\n};\r\n\r\nconst getDetailPartnerProductFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\nconst updatePartnerProduct = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updatePartnerProductSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updatePartnerProductFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\nconst getDetailPartnerConstruction = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getDetailPartnerConstructionSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataDetailPartnerConstruction: action.data.construction,\r\n  });\r\n};\r\n\r\nconst getDetailPartnerConstructionFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\nconst updatePartnerConstruction = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updatePartnerConstructionSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updatePartnerConstructionFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\nconst resetType = (state) => {\r\n  return state.merge({\r\n    type: '',\r\n  });\r\n};\r\n\r\n// Assign handler to types.\r\nconst HANDLERS = {\r\n  [Types.GET_LIST_PARTNER]: getListPartner,\r\n  [Types.GET_LIST_PARTNER_SUCCESS]: getListPartnerSuccess,\r\n  [Types.GET_LIST_PARTNER_FAILED]: getListPartnerFailed,\r\n\r\n  [Types.GET_LIST_AREAS]: getListAreas,\r\n  [Types.GET_LIST_AREAS_SUCCESS]: getListAreasSuccess,\r\n  [Types.GET_LIST_AREAS_FAILED]: getListAreasFailed,\r\n\r\n  [Types.GET_LIST_SCALES]: getListScales,\r\n  [Types.GET_LIST_SCALES_SUCCESS]: getListScalesSuccess,\r\n  [Types.GET_LIST_SCALES_FAILED]: getListScalesFailed,\r\n\r\n  [Types.GET_LIST_CONSTANT]: getListConstant,\r\n  [Types.GET_LIST_CONSTANT_SUCCESS]: getListConstantSuccess,\r\n  [Types.GET_LIST_CONSTANT_FAILED]: getListConstantFailed,\r\n\r\n  [Types.GET_LIST_PARTNER_MANAGEMENT]: getListPartnerManagement,\r\n  [Types.GET_LIST_PARTNER_MANAGEMENT_SUCCESS]: getListPartnerManagementSuccess,\r\n  [Types.GET_LIST_PARTNER_MANAGEMENT_FAILED]: getListPartnerManagementFailed,\r\n\r\n  [Types.DELETE_PARTNER]: deletePartner,\r\n  [Types.DELETE_PARTNER_SUCCESS]: deletePartnerSuccess,\r\n  [Types.DELETE_PARTNER_FAILED]: deletePartnerFailed,\r\n\r\n  [Types.REGISTER_PARTNER_COMPANY]: registerPartnerCompany,\r\n  [Types.REGISTER_PARTNER_COMPANY_SUCCESS]: registerPartnerCompanySuccess,\r\n  [Types.REGISTER_PARTNER_COMPANY_FAILED]: registerPartnerCompanyFailed,\r\n\r\n  [Types.GET_LIST_CONSTRUCTION]: getListConstruction,\r\n  [Types.GET_LIST_CONSTRUCTION_SUCCESS]: getListConstructionSuccess,\r\n  [Types.GET_LIST_CONSTRUCTION_FAILED]: getListConstructionFailed,\r\n\r\n  [Types.GET_LIST_PARTNER_PRODUCT]: getListPartnerProduct,\r\n  [Types.GET_LIST_PARTNER_PRODUCT_SUCCESS]: getListPartnerProductSuccess,\r\n  [Types.GET_LIST_PARTNER_PRODUCT_FAILED]: getListPartnerProductFailed,\r\n\r\n  [Types.GET_LIST_PARTNER_QUOTE]: getListPartnerQuote,\r\n  [Types.GET_LIST_PARTNER_QUOTE_SUCCESS]: getListPartnerQuoteSuccess,\r\n  [Types.GET_LIST_PARTNER_QUOTE_FAILED]: getListPartnerQuoteFailed,\r\n\r\n  [Types.REGISTER_PARTNER_PRODUCT]: registerPartnerProduct,\r\n  [Types.REGISTER_PARTNER_PRODUCT_SUCCESS]: registerPartnerProductSuccess,\r\n  [Types.REGISTER_PARTNER_PRODUCT_FAILED]: registerPartnerProductFailed,\r\n\r\n  [Types.REGISTER_PARTNER_CONSTRUCTION]: registerPartnerConstruction,\r\n  [Types.REGISTER_PARTNER_CONSTRUCTION_SUCCESS]: registerPartnerConstructionSuccess,\r\n  [Types.REGISTER_PARTNER_CONSTRUCTION_FAILED]: registerPartnerConstructionFailed,\r\n\r\n  [Types.GET_DETAIL_PARTNER_PRODUCT]: getDetailPartnerProduct,\r\n  [Types.GET_DETAIL_PARTNER_PRODUCT_SUCCESS]: getDetailPartnerProductSuccess,\r\n  [Types.GET_DETAIL_PARTNER_PRODUCT_FAILED]: getDetailPartnerProductFailed,\r\n\r\n  [Types.UPDATE_PARTNER_PRODUCT]: updatePartnerProduct,\r\n  [Types.UPDATE_PARTNER_PRODUCT_SUCCESS]: updatePartnerProductSuccess,\r\n  [Types.UPDATE_PARTNER_PRODUCT_FAILED]: updatePartnerProductFailed,\r\n\r\n  [Types.GET_DETAIL_PARTNER_CONSTRUCTION]: getDetailPartnerConstruction,\r\n  [Types.GET_DETAIL_PARTNER_CONSTRUCTION_SUCCESS]: getDetailPartnerConstructionSuccess,\r\n  [Types.GET_DETAIL_PARTNER_CONSTRUCTION_FAILED]: getDetailPartnerConstructionFailed,\r\n\r\n  [Types.UPDATE_PARTNER_CONSTRUCTION]: updatePartnerConstruction,\r\n  [Types.UPDATE_PARTNER_CONSTRUCTION_SUCCESS]: updatePartnerConstructionSuccess,\r\n  [Types.UPDATE_PARTNER_CONSTRUCTION_FAILED]: updatePartnerConstructionFailed,\r\n\r\n  [Types.RESET_TYPE]: resetType,\r\n};\r\n\r\n// Create reducers by pass state and handlers\r\nexport const partnerReducer = createReducer(INITIAL_STATE, HANDLERS);\r\n","// import libs\r\nimport { createActions, createReducer } from 'reduxsauce';\r\nimport Immutable from 'seamless-immutable';\r\nimport moment from 'moment';\r\n\r\n// Define action creators\r\nexport const { Types, Creators } = createActions({\r\n  getListCustomer: ['data'],\r\n  getListCustomerSuccess: null,\r\n  getListCustomerFailed: null,\r\n  getListName: null,\r\n  getListNameSuccess: null,\r\n  getListNameFailed: null,\r\n  getDetailCustomer: ['id'],\r\n  getDetailCustomerSuccess: null,\r\n  getDetailCustomerFailed: null,\r\n  updateCustomer: ['id', 'data'],\r\n  updateCustomerSuccess: null,\r\n  updateCustomerFailed: null,\r\n  getListSpaceType: null,\r\n  getListSpaceTypeSuccess: null,\r\n  getListSpaceTypeFailed: null,\r\n  getListDivision: ['id'],\r\n  getListDivisionSuccess: null,\r\n  getListDivisionFailed: null,\r\n  registerProject: ['data'],\r\n  registerProjectSuccess: null,\r\n  registerProjectFailed: null,\r\n  deleteProject: ['id'],\r\n  deleteProjectSuccess: null,\r\n  deleteProjectFailed: null,\r\n  getDetailProject: ['id'],\r\n  getDetailProjectSuccess: null,\r\n  getDetailProjectFailed: null,\r\n  getListProject: null,\r\n  getListProjectSuccess: null,\r\n  getListProjectFailed: null,\r\n  getListConstructionCustomer: ['id'],\r\n  getListConstructionCustomerSuccess: null,\r\n  getListConstructionCustomerFailed: null,\r\n  registerConstructionCustomer: ['data'],\r\n  registerConstructionCustomerSuccess: null,\r\n  registerConstructionCustomerFailed: null,\r\n  registerProjectItem: ['data'],\r\n  registerProjectItemSuccess: null,\r\n  registerProjectItemFailed: null,\r\n  resetData: null,\r\n  updateProjectItem: ['id', 'data'],\r\n  updateProjectItemSuccess: null,\r\n  updateProjectItemFailed: null,\r\n});\r\n\r\n// Initial state\r\nexport const INITIAL_STATE = Immutable({\r\n  isProcessing: false,\r\n  dataCustomer: [],\r\n  listName: [],\r\n  totalCustomer: '',\r\n  dataDetailCustomer: {},\r\n  listSpaceType: [],\r\n  listDivision: [],\r\n  dataDetailProject: {},\r\n  listProject: [],\r\n  listConstructionCustomer: {},\r\n  listTableConstruction: [],\r\n  totalConstruction: 0,\r\n  projectId: '',\r\n});\r\n\r\nconst getListCustomer = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListCustomerSuccess = (state, action) => {\r\n  const dataCustomer = action.data.customer.data.map((item) => ({\r\n    id: item.id,\r\n    date:\r\n      item.created_at && moment(item.created_at).format('HH:mm - DD/MM/yyyy'),\r\n    nameCustomer: item.name,\r\n    nameIncor: item.name_incor,\r\n    vote: item.area?.name,\r\n  }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataCustomer,\r\n    totalCustomer: action.data.customer.total,\r\n  });\r\n};\r\n\r\nconst getListCustomerFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListName = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListNameSuccess = (state, action) => {\r\n  const listName = action.data.name_incor.map((item, index) => ({\r\n    id: index,\r\n    value: item,\r\n    label: item,\r\n  }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    listName,\r\n  });\r\n};\r\n\r\nconst getListNameFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getDetailCustomer = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getDetailCustomerSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataDetailCustomer: action.data.customer,\r\n  });\r\n};\r\n\r\nconst getDetailCustomerFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCustomer = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCustomerSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCustomerFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListSpaceType = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListSpaceTypeSuccess = (state, action) => {\r\n  const listSpaceType = action.data.type.map((item) => ({\r\n    id: item.id,\r\n    value: item.name,\r\n    label: item.name,\r\n  }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    listSpaceType,\r\n  });\r\n};\r\n\r\nconst getListSpaceTypeFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListDivision = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListDivisionSuccess = (state, action) => {\r\n  const listDivision = action.data.division.map((item, index) => ({\r\n    id: index,\r\n    value: item.name,\r\n    label: item.name,\r\n  }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    listDivision,\r\n  });\r\n};\r\n\r\nconst getListDivisionFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerProject = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerProjectSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    projectId: action.data.customer.id,\r\n  });\r\n};\r\n\r\nconst registerProjectFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getDetailProject = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getDetailProjectSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataDetailProject: action.data.project,\r\n  });\r\n};\r\n\r\nconst getDetailProjectFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deleteProject = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deleteProjectSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deleteProjectFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListProject = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListProjectSuccess = (state, action) => {\r\n  const listProject = action.data.project.map((item) => ({\r\n    id: item.id,\r\n    value: item.name,\r\n    label: item.name,\r\n  }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    listProject,\r\n  });\r\n};\r\n\r\nconst getListProjectFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListConstructionCustomer = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListConstructionCustomerSuccess = (state, action) => {\r\n  const listTableConstruction =\r\n    action.data &&\r\n    action.data[0] &&\r\n    action.data[0].item &&\r\n    action.data[0].item.data.map((item) => ({\r\n      id: item.id,\r\n      categories: item.category,\r\n      description: item.description,\r\n      total: item.amount,\r\n      time: `${item.estimate} ${item.unit}`,\r\n      progress: `${item.progress_begin} / ${item.progress_end}`,\r\n      price: item.paid,\r\n      prices: item.amount - item.paid,\r\n      note: item.note,\r\n    }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    listConstructionCustomer: action.data && action.data[0],\r\n    listTableConstruction,\r\n    totalConstruction: action?.data[0]?.item?.total,\r\n  });\r\n};\r\n\r\nconst getListConstructionCustomerFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerConstructionCustomer = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerConstructionCustomerSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerConstructionCustomerFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerProjectItem = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerProjectItemSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerProjectItemFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateProjectItem = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateProjectItemSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateProjectItemFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst resetData = (state) => {\r\n  return state.merge({\r\n    projectId: '',\r\n  });\r\n};\r\n\r\n// Assign handler to types.\r\nconst HANDLERS = {\r\n  [Types.GET_LIST_CUSTOMER]: getListCustomer,\r\n  [Types.GET_LIST_CUSTOMER_SUCCESS]: getListCustomerSuccess,\r\n  [Types.GET_LIST_CUSTOMER_FAILED]: getListCustomerFailed,\r\n\r\n  [Types.GET_LIST_NAME]: getListName,\r\n  [Types.GET_LIST_NAME_SUCCESS]: getListNameSuccess,\r\n  [Types.GET_LIST_NAME_FAILED]: getListNameFailed,\r\n\r\n  [Types.GET_DETAIL_CUSTOMER]: getDetailCustomer,\r\n  [Types.GET_DETAIL_CUSTOMER_SUCCESS]: getDetailCustomerSuccess,\r\n  [Types.GET_DETAIL_CUSTOMER_FAILED]: getDetailCustomerFailed,\r\n\r\n  [Types.UPDATE_CUSTOMER]: updateCustomer,\r\n  [Types.UPDATE_CUSTOMER_SUCCESS]: updateCustomerSuccess,\r\n  [Types.UPDATE_CUSTOMER_FAILED]: updateCustomerFailed,\r\n\r\n  [Types.GET_LIST_SPACE_TYPE]: getListSpaceType,\r\n  [Types.GET_LIST_SPACE_TYPE_SUCCESS]: getListSpaceTypeSuccess,\r\n  [Types.GET_LIST_SPACE_TYPE_FAILED]: getListSpaceTypeFailed,\r\n\r\n  [Types.GET_LIST_DIVISION]: getListDivision,\r\n  [Types.GET_LIST_DIVISION_SUCCESS]: getListDivisionSuccess,\r\n  [Types.GET_LIST_DIVISION_FAILED]: getListDivisionFailed,\r\n\r\n  [Types.REGISTER_PROJECT]: registerProject,\r\n  [Types.REGISTER_PROJECT_SUCCESS]: registerProjectSuccess,\r\n  [Types.REGISTER_PROJECT_FAILED]: registerProjectFailed,\r\n\r\n  [Types.DELETE_PROJECT]: deleteProject,\r\n  [Types.DELETE_PROJECT_SUCCESS]: deleteProjectSuccess,\r\n  [Types.DELETE_PROJECT_FAILED]: deleteProjectFailed,\r\n\r\n  [Types.GET_DETAIL_PROJECT]: getDetailProject,\r\n  [Types.GET_DETAIL_PROJECT_SUCCESS]: getDetailProjectSuccess,\r\n  [Types.GET_DETAIL_PROJECT_FAILED]: getDetailProjectFailed,\r\n\r\n  [Types.GET_LIST_PROJECT]: getListProject,\r\n  [Types.GET_LIST_PROJECT_SUCCESS]: getListProjectSuccess,\r\n  [Types.GET_LIST_PROJECT_FAILED]: getListProjectFailed,\r\n\r\n  [Types.GET_LIST_CONSTRUCTION_CUSTOMER]: getListConstructionCustomer,\r\n  [Types.GET_LIST_CONSTRUCTION_CUSTOMER_SUCCESS]: getListConstructionCustomerSuccess,\r\n  [Types.GET_LIST_CONSTRUCTION_CUSTOMER_FAILED]: getListConstructionCustomerFailed,\r\n\r\n  [Types.REGISTER_CONSTRUCTION_CUSTOMER]: registerConstructionCustomer,\r\n  [Types.REGISTER_CONSTRUCTION_CUSTOMER_SUCCESS]: registerConstructionCustomerSuccess,\r\n  [Types.REGISTER_CONSTRUCTION_CUSTOMER_FAILED]: registerConstructionCustomerFailed,\r\n\r\n  [Types.REGISTER_PROJECT_ITEM]: registerProjectItem,\r\n  [Types.REGISTER_PROJECT_ITEM_SUCCESS]: registerProjectItemSuccess,\r\n  [Types.REGISTER_PROJECT_ITEM_FAILED]: registerProjectItemFailed,\r\n\r\n  [Types.UPDATE_PROJECT_ITEM]: updateProjectItem,\r\n  [Types.UPDATE_PROJECT_ITEM_SUCCESS]: updateProjectItemSuccess,\r\n  [Types.UPDATE_PROJECT_ITEM_FAILED]: updateProjectItemFailed,\r\n\r\n  [Types.RESET_DATA]: resetData,\r\n};\r\n\r\n// Create reducers by pass state and handlers\r\nexport const customerReducer = createReducer(INITIAL_STATE, HANDLERS);\r\n","// import libs\r\nimport { createActions, createReducer } from 'reduxsauce';\r\nimport Immutable from 'seamless-immutable';\r\nimport moment from 'moment';\r\n\r\n// Define action creators\r\nexport const { Types, Creators } = createActions({\r\n  getListCategories: ['data'],\r\n  getListCategoriesSuccess: null,\r\n  getListCategoriesFailed: null,\r\n  deleteCategories: ['data'],\r\n  deleteCategoriesSuccess: null,\r\n  deleteCategoriesFailed: null,\r\n  registerCategories: ['data'],\r\n  registerCategoriesSuccess: null,\r\n  registerCategoriesFailed: null,\r\n  getListParent: null,\r\n  getListParentSuccess: null,\r\n  getListParentFailed: null,\r\n  getCategoriesDetail: ['id'],\r\n  getCategoriesDetailSuccess: null,\r\n  getCategoriesDetailFailed: null,\r\n  updateCategories: ['id', 'data'],\r\n  updateCategoriesSuccess: null,\r\n  updateCategoriesFailed: null,\r\n  getListPost: ['data'],\r\n  getListPostSuccess: null,\r\n  getListPostFailed: null,\r\n  getListAllCategories: ['data'],\r\n  getListAllCategoriesSuccess: null,\r\n  getListAllCategoriesFailed: null,\r\n  registerPost: ['data'],\r\n  registerPostSuccess: null,\r\n  registerPostFailed: null,\r\n  getListAllSeoTitle: null,\r\n  getListAllSeoTitleSuccess: null,\r\n  getListAllSeoTitleFailed: null,\r\n  deletePost: ['data'],\r\n  deletePostSuccess: null,\r\n  deletePostFailed: null,\r\n  getPostDetail: ['id'],\r\n  getPostDetailSuccess: null,\r\n  getPostDetailFailed: null,\r\n  updatePost: ['id', 'data'],\r\n  updatePostSuccess: null,\r\n  updatePostFailed: null,\r\n});\r\n\r\n// Initial state\r\nexport const INITIAL_STATE = Immutable({\r\n  isProcessing: false,\r\n  dataCategories: [],\r\n  dataParent: [],\r\n  categoriesDetail: {},\r\n  listPost: [],\r\n  totalPost: '',\r\n  listAllCategories: [],\r\n  listAllSeoTitle: [],\r\n  errorMsg: '',\r\n  dataPostDetail: {},\r\n  listCategoryPost: {},\r\n});\r\n\r\nconst getListCategories = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListCategoriesSuccess = (state, action) => {\r\n  const dataListCategory =\r\n    action.data.categories &&\r\n    action.data.categories.data &&\r\n    action.data.categories.data.map((item) => ({\r\n      id: item.id,\r\n      title: item.name,\r\n      category: item.slug,\r\n      score: item.posts_count,\r\n    }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataCategories: dataListCategory,\r\n  });\r\n};\r\n\r\nconst getListCategoriesFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deleteCategories = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deleteCategoriesSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deleteCategoriesFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerCategories = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerCategoriesSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerCategoriesFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListParent = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListParentSuccess = (state, action) => {\r\n  const listParent =\r\n    action.data &&\r\n    action.data.categories &&\r\n    action.data.categories.map((item) => ({\r\n      id: item.id,\r\n      value: item.name,\r\n      label: item.name,\r\n    }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataParent: listParent,\r\n  });\r\n};\r\n\r\nconst getListParentFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getCategoriesDetail = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getCategoriesDetailSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    categoriesDetail: action.data.category,\r\n  });\r\n};\r\n\r\nconst getCategoriesDetailFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCategories = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCategoriesSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCategoriesFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPost = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListPostSuccess = (state, action) => {\r\n  const dataListPost =\r\n    action.data.post &&\r\n    action.data.post.data.map((item) => ({\r\n      id: item.id,\r\n      title: item.seo_title,\r\n      writer: item.user.name,\r\n      category: item.category.name,\r\n      time: moment(item.created_at).format('HH:mm YYYY-MM-DD'),\r\n      Thumbnail: item.image ? 'Có' : 'Không',\r\n      score: item.seo_score,\r\n    }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    listPost: dataListPost,\r\n    totalPost: action.data.post.total,\r\n  });\r\n};\r\n\r\nconst getListPostFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListAllCategories = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListAllCategoriesSuccess = (state, action) => {\r\n  const dataAllCategories =\r\n    action.data.categories &&\r\n    action.data.categories.data &&\r\n    action.data.categories.data.map((item) => ({\r\n      id: item.id,\r\n      value: item.name,\r\n      label: item.name,\r\n    }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    listAllCategories: dataAllCategories,\r\n  });\r\n};\r\n\r\nconst getListAllCategoriesFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPost = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPostSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst registerPostFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\nconst getListAllSeoTitle = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getListAllSeoTitleSuccess = (state, action) => {\r\n  const dataAllSeoTitle =\r\n    action.data.seo_title &&\r\n    action.data.seo_title.map((item, index) => ({\r\n      id: index,\r\n      value: item,\r\n      label: item,\r\n    }));\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    listAllSeoTitle: dataAllSeoTitle,\r\n  });\r\n};\r\n\r\nconst getListAllSeoTitleFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deletePost = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deletePostSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst deletePostFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getPostDetail = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getPostDetailSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataPostDetail: action.data.post,\r\n    listCategoryPost: {\r\n      id: action.data.post.category.id,\r\n      value: action.data.post.category.name,\r\n      label: action.data.post.category.name,\r\n    },\r\n  });\r\n};\r\n\r\nconst getPostDetailFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updatePost = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updatePostSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updatePostFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errorMsg: action.errorMsg,\r\n  });\r\n};\r\n\r\n// Assign handler to types.\r\nconst HANDLERS = {\r\n  [Types.GET_LIST_CATEGORIES]: getListCategories,\r\n  [Types.GET_LIST_CATEGORIES_SUCCESS]: getListCategoriesSuccess,\r\n  [Types.GET_LIST_CATEGORIES_FAILED]: getListCategoriesFailed,\r\n\r\n  [Types.DELETE_CATEGORIES]: deleteCategories,\r\n  [Types.DELETE_CATEGORIES_SUCCESS]: deleteCategoriesSuccess,\r\n  [Types.DELETE_CATEGORIES_FAILED]: deleteCategoriesFailed,\r\n\r\n  [Types.REGISTER_CATEGORIES]: registerCategories,\r\n  [Types.REGISTER_CATEGORIES_SUCCESS]: registerCategoriesSuccess,\r\n  [Types.REGISTER_CATEGORIES_FAILED]: registerCategoriesFailed,\r\n\r\n  [Types.GET_LIST_PARENT]: getListParent,\r\n  [Types.GET_LIST_PARENT_SUCCESS]: getListParentSuccess,\r\n  [Types.GET_LIST_PARENT_FAILED]: getListParentFailed,\r\n\r\n  [Types.GET_CATEGORIES_DETAIL]: getCategoriesDetail,\r\n  [Types.GET_CATEGORIES_DETAIL_SUCCESS]: getCategoriesDetailSuccess,\r\n  [Types.GET_CATEGORIES_DETAIL_FAILED]: getCategoriesDetailFailed,\r\n\r\n  [Types.UPDATE_CATEGORIES]: updateCategories,\r\n  [Types.UPDATE_CATEGORIES_SUCCESS]: updateCategoriesSuccess,\r\n  [Types.UPDATE_CATEGORIES_FAILED]: updateCategoriesFailed,\r\n\r\n  [Types.GET_LIST_POST]: getListPost,\r\n  [Types.GET_LIST_POST_SUCCESS]: getListPostSuccess,\r\n  [Types.GET_LIST_POST_FAILED]: getListPostFailed,\r\n\r\n  [Types.GET_LIST_ALL_CATEGORIES]: getListAllCategories,\r\n  [Types.GET_LIST_ALL_CATEGORIES_SUCCESS]: getListAllCategoriesSuccess,\r\n  [Types.GET_LIST_ALL_CATEGORIES_FAILED]: getListAllCategoriesFailed,\r\n\r\n  [Types.REGISTER_POST]: registerPost,\r\n  [Types.REGISTER_POST_SUCCESS]: registerPostSuccess,\r\n  [Types.REGISTER_POST_FAILED]: registerPostFailed,\r\n\r\n  [Types.GET_LIST_ALL_SEO_TITLE]: getListAllSeoTitle,\r\n  [Types.GET_LIST_ALL_SEO_TITLE_SUCCESS]: getListAllSeoTitleSuccess,\r\n  [Types.GET_LIST_ALL_SEO_TITLE_FAILED]: getListAllSeoTitleFailed,\r\n\r\n  [Types.DELETE_POST]: deletePost,\r\n  [Types.DELETE_POST_SUCCESS]: deletePostSuccess,\r\n  [Types.DELETE_POST_FAILED]: deletePostFailed,\r\n\r\n  [Types.GET_POST_DETAIL]: getPostDetail,\r\n  [Types.GET_POST_DETAIL_SUCCESS]: getPostDetailSuccess,\r\n  [Types.GET_POST_DETAIL_FAILED]: getPostDetailFailed,\r\n\r\n  [Types.UPDATE_POST]: updatePost,\r\n  [Types.UPDATE_POST_SUCCESS]: updatePostSuccess,\r\n  [Types.UPDATE_POST_FAILED]: updatePostFailed,\r\n};\r\n\r\n// Create reducers by pass state and handlers\r\nexport const postReducer = createReducer(INITIAL_STATE, HANDLERS);\r\n","// import libs\r\nimport { createActions, createReducer } from 'reduxsauce';\r\nimport Immutable from 'seamless-immutable';\r\n\r\n// Define action creators\r\nexport const { Types, Creators } = createActions({\r\n  getAboutUs: null,\r\n  getAboutUsSuccess: null,\r\n  getAboutUsFailed: null,\r\n\r\n  updateAboutUs: ['data'],\r\n  updateAboutUsSuccess: null,\r\n  updateAboutUsFailed: null,\r\n\r\n  getCustomerEXP: null,\r\n  getCustomerEXPSuccess: null,\r\n  getCustomerEXPFailed: null,\r\n\r\n  updateCustomerEXP: ['data'],\r\n  updateCustomerEXPSuccess: null,\r\n  updateCustomerEXPFailed: null,\r\n\r\n  getDataMap: ['data'],\r\n  getDataMapSuccess: null,\r\n  getDataMapFailed: null,\r\n\r\n  createIntroduce: ['data'],\r\n  createIntroduceSuccess: null,\r\n  createIntroduceFailed: null,\r\n\r\n  getValueHeader: ['data'],\r\n  getValueHeaderSuccess: null,\r\n  getValueHeaderFailed: null,\r\n\r\n  createFooter: ['data'],\r\n  createFooterSuccess: null,\r\n  createFooterFailed: null,\r\n\r\n  getDataFooter: null,\r\n  getDataFooterSuccess: null,\r\n  getDataFooterFailed: null,\r\n\r\n  updateSaleMap: ['data'],\r\n  updateSaleMapSuccess: null,\r\n  updateSaleMapFailed: null,\r\n});\r\n\r\n// Initial state\r\nexport const INITIAL_STATE = Immutable({\r\n  isProcessing: false,\r\n  statusCode: 0,\r\n  dataAboutUs: {},\r\n  dataCustomer: {},\r\n  dataSaleMap: {},\r\n  errors: '',\r\n  type: '',\r\n  valueHeader: {},\r\n});\r\n\r\nconst getAboutUs = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getAboutUsSuccess = (state, action) => {\r\n  const { data } = action;\r\n\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataAboutUs: data || {},\r\n  });\r\n};\r\n\r\nconst getAboutUsFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateAboutUs = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateAboutUsSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateAboutUsFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getCustomerEXP = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getCustomerEXPSuccess = (state, action) => {\r\n  const { data } = action;\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataCustomer: data,\r\n  });\r\n};\r\n\r\nconst getCustomerEXPFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCustomerEXP = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCustomerEXPSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateCustomerEXPFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getDataMap = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst getDataMapSuccess = (state, action) => {\r\n  const { data } = action;\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    dataSaleMap: data,\r\n  });\r\n};\r\n\r\nconst getDataMapFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateSaleMap = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateSaleMapSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst updateSaleMapFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\nconst createIntroduce = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n    errors: '',\r\n  });\r\n};\r\nconst createIntroduceSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst createIntroduceFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errors: action.errors,\r\n  });\r\n};\r\n\r\nconst getValueHeader = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n    errors: '',\r\n  });\r\n};\r\nconst getValueHeaderSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    valueHeader: action.data.map,\r\n  });\r\n};\r\n\r\nconst getValueHeaderFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errors: action.errors,\r\n  });\r\n};\r\n\r\nconst createFooter = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: true,\r\n    type: action.type,\r\n    errors: '',\r\n  });\r\n};\r\nconst createFooterSuccess = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n  });\r\n};\r\n\r\nconst createFooterFailed = (state, action) => {\r\n  return state.merge({\r\n    isProcessing: false,\r\n    type: action.type,\r\n    errors: action.errors,\r\n  });\r\n};\r\n\r\n// Assign handler to types.\r\nconst HANDLERS = {\r\n  [Types.GET_ABOUT_US]: getAboutUs,\r\n  [Types.GET_ABOUT_US_SUCCESS]: getAboutUsSuccess,\r\n  [Types.GET_ABOUT_US_FAILED]: getAboutUsFailed,\r\n\r\n  [Types.UPDATE_ABOUT_US]: updateAboutUs,\r\n  [Types.UPDATE_ABOUT_US_SUCCESS]: updateAboutUsSuccess,\r\n  [Types.UPDATE_ABOUT_US_FAILED]: updateAboutUsFailed,\r\n\r\n  [Types.GET_CUSTOMER_EXP]: getCustomerEXP,\r\n  [Types.GET_CUSTOMER_EXP_SUCCESS]: getCustomerEXPSuccess,\r\n  [Types.GET_CUSTOMER_EXP_FAILED]: getCustomerEXPFailed,\r\n\r\n  [Types.UPDATE_CUSTOMER_EXP]: updateCustomerEXP,\r\n  [Types.UPDATE_CUSTOMER_EXP_SUCCESS]: updateCustomerEXPSuccess,\r\n  [Types.UPDATE_CUSTOMER_EXP_FAILED]: updateCustomerEXPFailed,\r\n\r\n  [Types.GET_DATA_MAP]: getDataMap,\r\n  [Types.GET_DATA_MAP_SUCCESS]: getDataMapSuccess,\r\n  [Types.GET_DATA_MAP_FAILED]: getDataMapFailed,\r\n\r\n  [Types.UPDATE_SALE_MAP]: updateSaleMap,\r\n  [Types.UPDATE_SALE_MAP_SUCCESS]: updateSaleMapSuccess,\r\n  [Types.UPDATE_SALE_MAP_FAILED]: updateSaleMapFailed,\r\n\r\n  [Types.CREATE_INTRODUCE]: createIntroduce,\r\n  [Types.CREATE_INTRODUCE_SUCCESS]: createIntroduceSuccess,\r\n  [Types.CREATE_INTRODUCE_FAILED]: createIntroduceFailed,\r\n\r\n  [Types.GET_VALUE_HEADER]: getValueHeader,\r\n  [Types.GET_VALUE_HEADER_SUCCESS]: getValueHeaderSuccess,\r\n  [Types.GET_VALUE_HEADER_FAILED]: getValueHeaderFailed,\r\n\r\n  [Types.CREATE_FOOTER]: createFooter,\r\n  [Types.CREATE_FOOTER_SUCCESS]: createFooterSuccess,\r\n  [Types.CREATE_FOOTER_FAILED]: createFooterFailed,\r\n};\r\n\r\n// Create reducers by pass state and handlers\r\nexport const displayReducer = createReducer(INITIAL_STATE, HANDLERS);\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  userList: [],\r\n  isProcessing: false,\r\n  listRoles: [],\r\n};\r\n\r\nconst accountSlice = createSlice({\r\n  name: 'accounts',\r\n  initialState,\r\n  reducers: {\r\n    getListUser: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n\r\n    getListUserSuccess: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.userList = action.data.users;\r\n    },\r\n\r\n    getListUserFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n\r\n    getUserRoles: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n\r\n    getUserRolesSuccess: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.listRoles = action?.data?.roles.map((item) => ({\r\n        id: item.id,\r\n        value: item.name,\r\n        label: item.name,\r\n      }));\r\n    },\r\n\r\n    getUserRolesFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n\r\n    createUser: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n\r\n    createUserSuccess: (state, action) => {\r\n      const { data, userList } = action;\r\n      console.log(userList);\r\n      console.log(data);\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n      state.userList = {\r\n        ...userList,\r\n        data: [\r\n          {\r\n            id: data?.user?.id,\r\n            name: data?.user?.name,\r\n            role_name: data?.user?.roles?.[0]?.name,\r\n            create_at: data?.user?.created_at,\r\n          },\r\n          ...userList.data,\r\n        ],\r\n      };\r\n    },\r\n\r\n    createUserFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = accountSlice;\r\n\r\nexport const {\r\n  getListUser,\r\n  getListUserFailed,\r\n  getListUserSuccess,\r\n  getUserRoles,\r\n  getUserRolesSuccess,\r\n  getUserRolesFailed,\r\n  createUser,\r\n  createUserFailed,\r\n  createUserSuccess,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  userInfo: {},\r\n  dataMain: {},\r\n};\r\n\r\nconst mainSlice = createSlice({\r\n  name: 'main',\r\n  initialState,\r\n  reducers: {\r\n    getDataMain: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = true;\r\n    },\r\n\r\n    getDataMainSuccess: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n      state.dataMain = action.data;\r\n    },\r\n\r\n    getDataMainFailed: (state, action) => {\r\n      state.type = action.type;\r\n      state.isProcessing = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = mainSlice;\r\n\r\nexport const { getDataMain, getDataMainSuccess, getDataMainFailed } = actions;\r\n\r\nexport default reducer;\r\n"],"sourceRoot":""}